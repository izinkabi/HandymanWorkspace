@page "/order"

@using Consumer_SS.Pages.Orders.Tasks
@using Microsoft.AspNetCore.SignalR.Client;

@inject NavigationManager NavManager
@inject ILogger<OrderComponent> Logger
@inject IOrderHelper _orderHelper
@implements IDisposable



<!--Order Component MarkUp-->
@if (order!=null && order.service != null)
{

    @if(Errors!=null)
    {
        <!--Errors-->
        @foreach(string error in Errors)
        {
            <p class="text-danger">@error</p>
        }
    }

    <div class="row m-3 rounded-4 box-shadow" role="document">
        
        <dl class="align-content-center bg-info bg-opacity-10">

            <div class="card m-3 bg-transparent border-0">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="/Images/service-images/@(order.service.img)" class="img-fluid rounded-start" alt="...">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <!--Service Title-->
                            <h5 class="card-title" id="orderName">@order.service.name</h5>
                            <!--Description-->
                            <p class="card-text" id="orderDescription"> @order.service.category.description</p>
                            <!--Availability-->
                         
                            <p class="card-text"><small class="text-muted">@DateOnly.Parse($"{DateTime.UtcNow.ToShortDateString()}")</small></p>
                            <hr />
                           <!--On large display-->
                            @if (IsOnDetails)
                            {
                                <p class="font-monospace">Due Date</p>
                                @if (isDateSaved)
                                {
                                    <li class="d-inline-block border-1">
                                        <p class="fst-italic ">@DateOnly.Parse($"{order.duedate.ToShortDateString()}")</p>
                                        <button class="btn bg-transparent btn-outline-info" @onclick="editDate">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z"/>
                                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z"/>
                                            </svg>
                                        </button>
                                    </li>

                                }

                                <!--Due Date-->

                                @if (!isDateSaved)
                                {
                                    <div class="container container-fluid float-lg-start bg-transparent d-inline">

                                        <li class="d-inline-block">
                                            <input type="date" @bind="order.duedate" class="rounded" id="birthday" name="birthday">
                                            <button @onclick="saveDate"  class="btn btn-outline-info border-1 bg-transparent">
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save-fill" viewBox="0 0 16 16">
                                                    <path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v7.793L4.854 6.646a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l3.5-3.5a.5.5 0 0 0-.708-.708L8.5 9.293V1.5z" />
                                                </svg>
                                            </button>
                                        </li>


                                    </div>
                                }
                                
                            }
                            <!--End Due Date-->
                            
                        </div>

                    </div>
                </div>
            </div>
        </dl>
    

       

        <!--Provider Details-->
        <div class="collapse row rounded px-1 m-1 " id="providerDetails">
            <button class="align-content-lg-center text-center bg-transparent border-0 rounded-4 " data-bs-toggle="collapse" href="#providerDetails" aria-expanded="false" aria-controls="providerDetails" role="button">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-up-circle-fill" viewBox="0 0 16 16">
                    <path d="M16 8A8 8 0 1 0 0 8a8 8 0 0 0 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z"/>
                </svg>
            </button>
            <hr/>

           <HandymenDetailsComponent HandymenDetailsProperty="@order.Provider">

           </HandymenDetailsComponent>
          
        </div>
        <!--End Provider Details-->

        @if (taskList != null && taskList.Count > 0 && isOnDetails || order.status == 0 && taskList != null)
        {
            
            <!--List of task-items in the confirmed order-->
            <div class="list-group list-group-flush align-content-lg-center">

                @foreach (var item in taskList)
                {
                    <OrderTasksComponent isNew="false"
                             NewTask="@item"
                             OnAddToTasks="AddToTasks"
                             OnRemoveTask="RemoveTaskOnList">

                    </OrderTasksComponent>
                }
            </div>
            <!--End List-->
        }

        @if (order.status < 1)
        {
            <!--Creating new tasks-->
            <OrderTasksComponent isNew="true"
                         NewTask="@(new TaskModel())"
                         OnAddToTasks="AddToTasks">
            </OrderTasksComponent>
        }

        <!--No Tasks-->
        @if (taskList!=null)
        {
            @if (taskList.Count == 0)
            {
                <p class="font-monospace fst-italic">
                    There are no orders
                </p>

            }
        }
        <!--Tasks Listing-->
        @if (taskList != null )
        {
            
            @if (order.status < 1)
            {
                <div class="m-3 justify-content-center">
                    <button @onclick="ConfirmOrder" type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#staticBackdropConfirmorder"> Confirm </button>
                </div>
            }
        }

        @*
    ### Button display logic in a re-usable component###
    If the order is confirmed by the consumer and by the service provider accepted --display tracking button
    If the order is not confirmed by the consumer (and ofcourse by default cannot be accepted by a service provider) --display confirm button
    *@   
        
    
    </div>
    
}
        

@code {

    HandymanUILibrary.Models.OrderModel order;
    bool isOnDetails;
    bool isDateSaved;
    List<TaskModel>? taskList = new()!;

    private List<string> Errors = new List<string>();
    private HubConnection? hubConnection;
    private List<string> connectionMessages = new List<string>();
    int Day, Month, Year;


    [Parameter]
    public bool IsOnDetails 
    { 
        get {return isOnDetails; } 
        set 
        {
            isOnDetails = value;
            if (isOnDetails)
            {
                isDateSaved = true;
            }
        } 
    }

    [Parameter]
    public OrderModel OrderComponentModel
    {
        get
        {
            return order; 
        }

        set
        {
            order = value;
            order.duedate = DateTime.Now;
            taskList = order?.Tasks?.ToList();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeHubConnection();
            await OpenConnection();
        }
        catch (Exception ex)
        {
            Errors.Add(ex.Message);
        }
    }

    private void InitializeHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
          .WithUrl("https://localhost:7042/reqHub")
          .WithAutomaticReconnect()
          .Build();

        //Trying to connect
        hubConnection.Reconnecting += (sender) =>
        {
            var newOfferMessage = "Attempting to reconnect";
            connectionMessages.Add(newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        //Try to reconnect
        hubConnection.Reconnected += (sender) =>
        {
            var newOfferMessage = "Reconnected to the server";
            connectionMessages.Clear();
            connectionMessages.Add(newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };



        //Closing the connection
        hubConnection.Closed += (sender) =>
        {
            var newOfferMessage = "Connection Closed";
            connectionMessages.Add(newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };


    }
    //Is Connected
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    //Open Connection
    public async Task OpenConnection()
    {
        if (hubConnection is null)
        {
            InitializeHubConnection();
        }

        try
        {
            await hubConnection.StartAsync();
            connectionMessages.Add("Connection Started");

        }
        catch (Exception ex)
        {
            connectionMessages.Add(ex.Message);
        }
        //Initialise the offer to be negotiated
        //negoMessageInput = order.service.price;
    }

    //Negotiate offer
    public async Task Send()
    {
        try
        {
            if (IsConnected)
            {

                await hubConnection.InvokeAsync("PlaceOrder",
                               order);
            }

        }
        catch (Exception ex)
        {
            connectionMessages.Add(ex.Message);
        }
    }

    //Save Edited date 
    void saveDate()
    {
        if (isDateSaved)
        {
            isDateSaved = false;
        }
        isDateSaved = true;
    }
    //Set the date 
    void editDate()
    {
        isDateSaved = false;
    }

    /// <summary>
    ///  Add the new tasks to the order's task list
    ///  Method called when calling click the button to add a task to a list
    /// </summary>
    /// <param name="newTaskModel"></param>
    void AddToTasks(TaskModel newTaskModel)
    {

        if (newTaskModel != null)
        {
            newTaskModel.tas_service_id = order.service.id;
            if (taskList==null)
            {
                taskList = new()!;
            }
            taskList.Add(newTaskModel);

        }

    }

    //Redirection in razor component
    void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    //Remove a task
    void RemoveTaskOnList(TaskModel taskRemoved)
    {
        if(taskRemoved!=null)
            if (taskList.Contains(taskRemoved))
            {
                taskList.Remove(taskRemoved);
            } 
    }

    /// </summary>
    /// Confirming the order placement--soon to be in ordershelper by all means
    /// <returns></returns> 
    /// <summary>

    async Task ConfirmOrder()
    {
        try
        {
            order.Tasks = taskList;
            order.datecreated = DateTime.UtcNow;
            order.duedate = DateTime.Now;
            order.status = 0; //Thus confirmed

            int id = await _orderHelper.CreateOrder(order);
            if (id!=0)
            {
                order.Id = id;
                await Send();
            }
            
        }
        catch (Exception ex)
        {
            Errors.Add(ex.Message);
        }

    }


    void GetDate()
    {
        var duedate = DateOnly.Parse($"/{Day}/{Month}/{Year}");
    }

    /// <summary>
    /// This method is under construction
    /// Deleting / Cancelling the order, its tasks and its request
    /// Be careful of notifying the Service provider of the deleted request
    /// </summary>
    /// <param name="order"></param>
    /// <returns>Complete task / Handled Exception</returns>
    [Authorize]
    public async Task CancelOrder(HandymanUILibrary.Models.OrderModel order)
    {
        try
        {
            if (order != null)
            {
                //_orderHelper.CancelOrder(order);
                NavManager.ToAbsoluteUri("/index");
                await InvokeAsync(StateHasChanged);
            }

        }
        catch (Exception ex)
        {
            throw;

        }
    }


    public void Dispose()
    {
        try
        {
            if(hubConnection!=null)
            {
                hubConnection.DisposeAsync();
            }
        }
        catch (Exception ex)
        {

            Errors.Add(ex.Message);
        }
    }
}
