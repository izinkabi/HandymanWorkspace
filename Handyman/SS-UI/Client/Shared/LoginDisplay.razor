
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Components.Web
@using System.Security.Claims
@inject NavigationManager Navigation
@inject AuthenticationStateProvider _authStateProvider
@inject ILocalStorageService localStorage
@inject HttpClient http

    <AuthorizeView>
    <NotAuthorized>
        <button @onclick="ToLogIn" class="btn outline-btn-dark border-0">

            <strong>
                Sign In
            </strong>
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-lock" viewBox="0 0 16 16">
                <path d="M11 5a3 3 0 1 1-6 0 3 3 0 0 1 6 0ZM8 7a2 2 0 1 0 0-4 2 2 0 0 0 0 4Zm0 5.996V14H3s-1 0-1-1 1-4 6-4c.564 0 1.077.038 1.544.107a4.524 4.524 0 0 0-.803.918A10.46 10.46 0 0 0 8 10c-2.29 0-3.516.68-4.168 1.332-.678.678-.83 1.418-.832 1.664h5ZM9 13a1 1 0 0 1 1-1v-1a2 2 0 1 1 4 0v1a1 1 0 0 1 1 1v2a1 1 0 0 1-1 1h-4a1 1 0 0 1-1-1v-2Zm3-3a1 1 0 0 0-1 1v1h2v-1a1 1 0 0 0-1-1Z" />
            </svg>
        </button>

    </NotAuthorized>
    <Authorized>
 <!--Profile Vie- Dropdown -->
     
       <div id="sidebarMenu" class="navbar-collapse collapse d-sm-inline-flex flex-sm-row-reverse">
         <div class="dropdown text-center">
              <a class="d-block link-dark text-decoration-none dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
               
                    @if(image!=null)
                    {    
                        <img src="@(image)" alt="mdo" width="36" height="36" class="rounded-circle">
                    }else{
                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-person-circle" viewBox="0 0 16 16">
                            <path d="M11 6a3 3 0 1 1-6 0 3 3 0 0 1 6 0z" />
                            <path fill-rule="evenodd" d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm8-7a7 7 0 0 0-5.468 11.37C3.242 11.226 4.805 10 8 10s4.757 1.225 5.468 2.37A7 7 0 0 0 8 1z" />
                        </svg>
                    }
              </a>
             <ul class="dropdown-menu dropdown-menu-end text-small p-3 m-2">
                <li><a class="dropdown-item" href="Identity/Account/Manage/Index">@localUser.Identity.Name!</a></li>
                <li><hr class="dropdown-divider"></li>
                <li><a class="dropdown-item" href="#">Settings</a></li>
                <li><a class="dropdown-item" href="#">Profile</a></li>
                <li><hr class="dropdown-divider"></li>
                   <li>
                        <button class="nav-link m-auto outline-btn-dark border-0">
                            <button @onclick="OnClickLogOut" class="nav-link btn btn-link" type="submit">Logout</button>
                        </button>
                   </li>
             </ul>
         </div>
       </div>
       
    </Authorized>

</AuthorizeView>

@code{
    private string? image;

    private ClaimsPrincipal localUser = new ClaimsPrincipal();
    private void ToLogIn()
    {
        Navigation.NavigateTo("sign-in",true);
    }

    protected override async Task OnInitializedAsync()
    {
        
        var state = await _authStateProvider.GetAuthenticationStateAsync();
        localUser = state.User;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnClickLogOut()
    {
        var IsLoggedIn = await http.GetFromJsonAsync<bool>("Auth");
        await localStorage.RemoveItemAsync("token");
        var state = await _authStateProvider.GetAuthenticationStateAsync();
        localUser = state.User;
        await InvokeAsync(StateHasChanged);
        
    } 
}
