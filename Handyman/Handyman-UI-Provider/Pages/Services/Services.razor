@page "/Services"

@    using HandymanProviderLibrary.Api.ServiceProvider
@    using HandymanProviderLibrary.Models
@    using HandymanProviderLibrary.API
@    using Handyman_UI_Provider.Models.Services
@    using HandymanProviderLibrary.Api.Service

@inject IServiceEndpoint _serviceEndpoint
@inject IServiceProviderEndPoint _serviceProviderEndPoint
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager NavManager

<h5 class="text-center">Available Services</h5>

<!--List of Services-->
<div class="container px-4">
    <div class="row gy-5">
        @if (isNewAdded)
        {
            <div class="alert alert-warning alert-dismissible fade show" role="alert">
                <strong>You're are a Handymen for reals!</strong> You just added <strong>
                    @newlyAddedService.Name
                </strong> as a new Service on your profile.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        }
        <!--Table of services -->
         <table class="table">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">Category</th>
            <th scope="col">Image</th>
            <th scope="col">Options</th>
        </tr>
        </thead>

        @if (AllServices == null)
        {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually">Loading...</span>
            </div>
        </div>
        }

        @foreach (var s in AllServices)
        {
                <tbody>
                    <tr>
                        <th scope="row">@s.Id</th>
                        @{
                            //getting the selected service
                            newlyAddedService = new();
                            newlyAddedService = s;
                            //providerService = new();
                            //providerService.ServiceId = s.Id;
                        }
                        <td>@s.Name</td>
                        <td>@s.Description</td>
                        <td>@s.CategoryName / @s.CategoryType</td>
                        <td><img src="./Images/@s.ImageUrl" style="max-width: 50px" class="img-fluid rounded" alt="@s.Description"></td>
                        <td><button  @onclick="() => AddToProviderServices(s)" class="btn btn-primary">Add to my services</button></td>
                        
                    </tr>
                </tbody>
         }
          </table>
    </div>
</div>

<!--End of lists-->

@code {
    private List<DisplayServiceModel>? AllServices;
    private DisplayServiceModel newlyAddedService = new();
    private List<ServiceModel>? servicesData;
    private ProviderServiceModel? providerService;
    string? errorString;
    bool isNewAdded;

    protected override async Task OnInitializedAsync()
    {
        AllServices =  await LoadServices();
    }

    private async Task<List<DisplayServiceModel>> LoadServices()
    {
        AllServices = new List<DisplayServiceModel>();
        servicesData = new List<ServiceModel>();
        try
        {
            servicesData = await _serviceEndpoint.GetServices();
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }

        foreach (var service in servicesData)
        {
            //populating a service to UI model
            var s = new DisplayServiceModel();
            s.Name = service.Name;
            s.Description = service.Description;
            s.ImageUrl = service.ImageUrl;
            s.Id = service.Id;
            s.CategoryName = service.Name;
            s.CategoryDescription = service.Description;
            s.CategoryType = service.Type;
            AllServices.Add(s);
        }
        return AllServices;
    }

    //This method get the user Id and creates the provider's service
    public async Task AddToProviderServices(DisplayServiceModel btnService)
    {
        if( (btnService!=null) && ( _authenticationStateProvider is not null))
        {
            newlyAddedService = btnService;//Newly added service

            var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
            var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

            try
            {
                providerService = new();
                providerService.ServiceProviderId = UserId;
                providerService.ServiceId = btnService.Id;

                
                var result = await _serviceEndpoint.CreateProviderService(providerService);

                isNewAdded = true;
                //NavManager.NavigateTo()
            }
            catch (Exception ex)
            {
                errorString = ex.Message;
            }
        }
    }
}
