@page "/Services"

@using HandymanProviderLibrary.Models
@using Handyman_UI_Provider.Models.Services
@using HandymanProviderLibrary.Api.Service

@inject IServiceEndpoint _serviceEndpoint

<h3>Services</h3>

<!--List of Services-->
<div class="container px-4">
    <div class="row gy-5">



        <!--Table of services -->
         <table class="table">
        <thead>
        <tr>
            <th scope="col">#</th>
            <th scope="col">Name</th>
            <th scope="col">Description</th>
            <th scope="col">Category</th>
            <th scope="col">Image</th>
            <th scope="col">Options</th>
        </tr>
        </thead>
        @if (AllServices == null)
        {
        <div class="d-flex justify-content-center">
            <div class="spinner-border" role="status">
                <span class="visually">Loading...</span>
            </div>
        </div>
        }
        @foreach (var service in AllServices)
        {
        <tbody>
        <tr>
            <th scope="row">@service.Id</th>
            <td>@service.Name</td>
            <td>@service.Decription</td>
            <td>@service.CategoryName / @service.CategoryType</td>
            <td><img src="./Images/@service.ImageUrl" style="max-width: 50px" class="img-fluid rounded" alt="@service.Decription"></td>
        </tr>
        </tbody>
         }
          </table>
    </div>
</div>

<!--End of lists-->

@code {
    private List<DisplayServiceModel>? AllServices;
    private DisplayServiceModel service = new();
    private List<ServiceModel>? servicesData;
    string errorString;

    protected override async Task OnInitializedAsync()
    {
        AllServices =  await LoadServices();
    }

    private async Task<List<DisplayServiceModel>> LoadServices()
    {
        AllServices = new List<DisplayServiceModel>();
        servicesData = new List<ServiceModel>();
        try
        {
            servicesData = await _serviceEndpoint.GetServices();
        }
        catch (Exception ex)
        {
            errorString = ex.Message;
        }

        foreach (var service in servicesData)
        {
            //populating a service to UI model
            var s = new DisplayServiceModel();
            s.Name = service.Name;
            s.Decription = service.Description;
            s.ImageUrl = service.ImageUrl;
            s.Id = service.Id;
            s.CategoryName = service.Name;
            s.CategoryDescription = service.Description;
            s.CategoryType = service.Type;
            AllServices.Add(s);
        }
        return AllServices;
    }

   }
