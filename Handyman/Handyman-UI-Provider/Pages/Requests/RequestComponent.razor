@page "/requestcomponent"

@using HandymanProviderLibrary.Api.Request
@using HandymanProviderLibrary.Models
@using Handyman_UI_Provider.Models
@inject IRequestEndPoint _requestEndPoint
@inject AuthenticationStateProvider _authenticationStateProvider


   
@if (OrderId != null)
{

    <div class="card text-center">
       
        <div class="card-body">
            <h5 class="card-title">Service Name</h5>
            <p class="card-text"><img src="./Images/@(ImageUrl)" class="img-thumbnail active" width="200"/></p>
           @if(@IsAccepted.Equals(0))
           {
            <a @onclick="()=> AcceptRequest()" class="btn btn-primary">Accept</a>
           }        
        </div>
        <div class="card-footer text-muted">
            @OrderDate
        </div>
        <div class="accordion accordion-flush" id="accordionExample">
            @foreach (var item in orderTodoList)
            {
                @if (!IsAccepted.Equals(0))//order is just started
                {


                    <div class="accordion-item">
                        <h2 class="accordion-header" id="headingOne">
                            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@(item.Id)" aria-expanded="true" aria-controls="collapseOne">
                                @item.ItemName
                            </button>
                        </h2>
                        <div id="collapse@(item.Id)" class="accordion-collapse collapse show" aria-labelledby="headingOne" data-bs-parent="#accordionExample">
                            <div class="accordion-body">
                                 @item.Description
                            </div>
                           
                           <a href="todocomponent" class="btn" >
                                <svg xmlns="http://www.w3.org/2000/svg" width="18" height="18" fill="currentColor" class="bi bi-hammer" viewBox="0 0 16 16">
                                    <path d="M9.972 2.508a.5.5 0 0 0-.16-.556l-.178-.129a5.009 5.009 0 0 0-2.076-.783C6.215.862 4.504 1.229 2.84 3.133H1.786a.5.5 0 0 0-.354.147L.146 4.567a.5.5 0 0 0 0 .706l2.571 2.579a.5.5 0 0 0 .708 0l1.286-1.29a.5.5 0 0 0 .146-.353V5.57l8.387 8.873A.5.5 0 0 0 14 14.5l1.5-1.5a.5.5 0 0 0 .017-.689l-9.129-8.63c.747-.456 1.772-.839 3.112-.839a.5.5 0 0 0 .472-.334z" />
                                </svg>
                            </a>
                           
                        </div>
                    </div>

                }

            }
        </div>
    </div>
   
}else{
    <div class="call-out"> Selected Request is no longer available</div>
}
   

@code {
    private List<OrderModel>? orders;
    private RequestModel? newRequest;
    string? ErrorMsg;
    bool isStarted;
    bool isFinished;
    List<TodoModel>? orderTodoList;
    RequestDisplayModel? request = new()!;

    private string RequestStage = "New";

    [Parameter]
    [SupplyParameterFromQuery(Name = "Id")]
    public int? OrderId 
    { 
        get;
        set; 
    }
    [Parameter]
    [SupplyParameterFromQuery(Name = "sid")]
    public int ServiceId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "img")]
    public string? ImageUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ia")]
    public int IsAccepted { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ord")]
    public string? OrderDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        orderTodoList = new()!;
        orders = await _requestEndPoint.GetAllOrdersByService(ServiceId);
        orderTodoList = await _requestEndPoint.GetOrderTodoList(OrderId.Value);
        
    }

    //Create a new request
    public async Task AcceptRequest()
    {
        newRequest = new();
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        newRequest.ProviderId = UserId;
        newRequest.ServiceId = ServiceId;
        newRequest.OrderId = OrderId.Value;
        newRequest.DateAccepted = DateTime.Now;
        
        try
        {
            await _requestEndPoint.PostRequest(newRequest);
            IsAccepted = 1;
        }catch(Exception ex)
        {
            ErrorMsg = ex.Message;
        }

    }


    //This method has the mechanism for starting the request
    public void StartRequest()
    {
       
            RequestStage = "Started";            
            
    }

    //This method encapsulates the mechanism for processing the requesst
    public async Task ProcessRequest()
    {

    }

    //Completing the request method
    public void FinishRequest()
    {
        RequestStage = "Finished";
        
    }

    

}
