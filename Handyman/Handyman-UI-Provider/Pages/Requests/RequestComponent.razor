@page "/requestcomponent"

@using HandymanProviderLibrary.Api.Request
@using HandymanProviderLibrary.Models
@using Handyman_UI_Provider.Models
@inject IRequestEndPoint _requestEndPoint
@inject AuthenticationStateProvider _authenticationStateProvider
<html>
<link rel="canonical" href="https://getbootstrap.com/docs/5.2/examples/list-groups/">
<link href="../assets/dist/css/bootstrap.min.css" rel="stylesheet">
<head>


    <style>
      .bd-placeholder-img {
        font-size: 1.125rem;
        text-anchor: middle;
        -webkit-user-select: none;
        -moz-user-select: none;
        user-select: none;
      }

      media (min-width: 768px) {
        .bd-placeholder-img-lg {
          font-size: 3.5rem;
        }
      }

      .b-example-divider {
        height: 3rem;
        background-color: rgba(0, 0, 0, .1);
        border: solid rgba(0, 0, 0, .15);
        border-width: 1px 0;
        box-shadow: inset 0 .5em 1.5em rgba(0, 0, 0, .1), inset 0 .125em .5em rgba(0, 0, 0, .15);
      }

      .b-example-vr {
        flex-shrink: 0;
        width: 1.5rem;
        height: 100vh;
      }

      .bi {
        vertical-align: -.125em;
        fill: currentColor;
      }

      .nav-scroller {
        position: relative;
        z-index: 2;
        height: 2.75rem;
        overflow-y: hidden;
      }

      .nav-scroller .nav {
        display: flex;
        flex-wrap: nowrap;
        padding-bottom: 1rem;
        margin-top: -1px;
        overflow-x: auto;
        text-align: center;
        white-space: nowrap;
        -webkit-overflow-scrolling: touch;
      }
    </style>
    <link href="list-groups.css" rel="stylesheet">
</head>
<body>
@if (OrderId != null)
{

    <div class="card text-center">
       
        <div class="card-body">
            <h5 class="card-title">Service Name</h5>
            <p class="card-text"><img src="./Images/@(ImageUrl)" class="img-thumbnail active" width="200"/></p>
           @if(@IsAccepted.Equals(0))
           {
            <a @onclick="()=> AcceptRequest()" class="btn btn-primary">Accept</a>
           }        
        </div>
        <div class="card-footer text-muted">
            @OrderDate
        </div>
            <div class="list-group list-group-radio d-grid gap-2 border-0 w-auto">
            @foreach (var item in orderTodoList)
            {
                if (!IsAccepted.Equals(0))//order is just started
                {
                  

                        <div class="position-relative">
                            <input class="form-check-input position-absolute top-50 end-0 me-3 fs-5" type="radio" name="listGroupRadioGrid" id="listGroupRadioGrid1" value="">
                            <label class="list-group-item py-3 pe-5" for="listGroupRadioGrid1">
                                <strong class="fw-semibold"> @item.ItemName</strong>
                                <span class="d-block small opacity-75">@item.Description</span>
                            </label>
                        </div>
                }

            }
        </div>
    </div>
   
}else{
    <div class="call-out"> Selected Request is no longer available</div>
}
   

      
  </body>
   
</html>
@code {
    private List<OrderModel>? orders;
    private RequestModel? newRequest;
    string? ErrorMsg;
    bool isStarted;
    bool isFinished;
    List<TodoModel>? orderTodoList;
    RequestDisplayModel? request = new()!;

    private string RequestStage = "New";

    [Parameter]
    [SupplyParameterFromQuery(Name = "Id")]
    public int? OrderId 
    { 
        get;
        set; 
    }
    [Parameter]
    [SupplyParameterFromQuery(Name = "sid")]
    public int ServiceId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "img")]
    public string? ImageUrl { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ia")]
    public int IsAccepted { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ord")]
    public string? OrderDate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        orderTodoList = new()!;
        orders = await _requestEndPoint.GetAllOrdersByService(ServiceId);
        orderTodoList = await _requestEndPoint.GetOrderTodoList(OrderId.Value);
        
    }

    //Create a new request
    public async Task AcceptRequest()
    {
        newRequest = new();
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        newRequest.ProviderId = UserId;
        newRequest.ServiceId = ServiceId;
        newRequest.OrderId = OrderId.Value;
        newRequest.DateAccepted = DateTime.Now;
        
        try
        {
            await _requestEndPoint.PostRequest(newRequest);
            IsAccepted = 1;
        }catch(Exception ex)
        {
            ErrorMsg = ex.Message;
        }

    }


    //This method has the mechanism for starting the request
    public void StartRequest()
    {
       
            RequestStage = "Started";            
            
    }

    //This method encapsulates the mechanism for processing the requesst
    public async Task ProcessRequest()
    {

    }

    //Completing the request method
    public void FinishRequest()
    {
        RequestStage = "Finished";
        
    }

    

}
