@page "/requestcomponent"

@using HandymanProviderLibrary.Api.Request
@using HandymanProviderLibrary.Models
@using Handyman_UI_Provider.Models
@inject IRequestEndPoint _requestEndPoint
@inject AuthenticationStateProvider _authenticationStateProvider

@if (OrderId != null)
{

    <div class="card text-center">
        <div class="card-header">
            New Request
        </div>
        <div class="card-body">
            <h5 class="card-title">Service Name</h5>
            <p class="card-text"><img src="./Images/@(ImageUrl)" class="img-thumbnail active" width="200"/></p>
           @if(@IsAccepted.Equals(0))
           {
            <a @onclick="()=> AcceptRequest()" class="btn btn-primary">Accept</a>
           }        
        </div>
        <div class="card-footer text-muted">
            @OrderDate
        </div>
    </div>
}else{
    <div class="call-out"> Selected Request is no longer available</div>
}

@code {
    private List<OrderModel>? orders;
    private RequestModel? newRequest;
    string? ErrorMsg;

    [Parameter]
    [SupplyParameterFromQuery(Name = "Id")]
    public int? OrderId 
    { 
        get;
        set; 
    }
    [Parameter]
    [SupplyParameterFromQuery(Name = "sid")]
    public int ServiceId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "img")]
    public string? ImageUrl { get; set; }

    //[Parameter]
    //[SupplyParameterFromQuery(Name = "sn")]
    //public int ServiceName { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ia")]
    public int IsAccepted { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "ord")]
    public string? OrderDate { get; set; }

    protected async Task OnInitialisedAsync()
    {
        orders = await _requestEndPoint.GetAllOrdersByService(ServiceId);
    }

    //Create a new request
    public async Task AcceptRequest()
    {
        newRequest = new();
        var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
        var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;

        newRequest.ProviderId = UserId;
        newRequest.ServiceId = ServiceId;
        newRequest.OrderId = OrderId.Value;
        newRequest.DateAccepted = DateTime.Now;
        IsAccepted = 0;
        try
        {
            await _requestEndPoint.PostRequest(newRequest);
        }catch(Exception ex)
        {
            ErrorMsg = ex.Message;
        }

    }

    //public async Task<RequestDisplayModel> GetRequest()
    //{
    //    try
    //    {
            
    //    }catch(Exception ex)
    //    {
    //        ErrorMsg = ex.Message;
    //    }
    //}

}
