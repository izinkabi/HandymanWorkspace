@page "/"

@using HandymanProviderLibrary.Api.Request
@using HandymanProviderLibrary.Api.Service
@using HandymanProviderLibrary.Api.ServiceProvider
@using HandymanProviderLibrary.Models
@using Handyman_UI_Provider.Models
@using Handyman_UI_Provider.Models.Services
@using Microsoft.Extensions.Logging

@implements IDisposable

@inject IRequestEndPoint _requestEndPoint
@inject NavigationManager NavManager
@inject IServiceEndpoint _serviceEndPoint 
@inject IServiceProviderEndPoint? _serviceProviderEndPoint
@inject AuthenticationStateProvider _authenticationStateProvider
@inject ILogger<Index> Logger

<PageTitle>Home</PageTitle>

<div class="container-fluid">
     <h3 class="text-center">Dashboard</h3>
     <!--New Request Cards-->
         <div class="container text-start">
          <div class="row g-2">
              
              @foreach(var r in @newRequests)
              {
                if (r.order.IsAccepted.Equals(0))
                {
                    //Requests as a thumb-nails
                  <div class="col-3" >
                        <a @onclick="() => DisplayRequestDetails(r)">
                  <div class="p-3 border bg-light">
                     <div class="card text-bg-dark">
                      
                      <img src="./Images/@(@r.Service.ImageUrl)" class="card-img shadow p-3 rounded" alt="..." width="75"/>
                      
                      <div class="card-img-overlay">
                            <h5 class="card-title" >@r.Service.Name Request</h5>
                      </div>
                      <div class="card-footer">
                                <p class="text-center"><strong>Date Requested </strong> @r.order.DateCreated.ToString("MM/dd/yyyy HH:mm")</p>
                      </div>
                    </div>
                  </div>
                  </a>
                </div>
                }
              }
            @if (newRequests.Count.Equals(0))
            {
                <div class="alert alert-dismissible alert-dark">
                    No New Request yet
                    </div>
            }
            <!--------End New Request Cards-------->
    
          </div>
        </div>
</div>
<hr/>

  <div class="row">
    <h3 class="text-center">Business</h3>
  
      <div class="col-7 align-content-start g-4"><table class="table">
  <thead>
      <!--Provider's services list-->
    <tr>
      
      <th scope="col">Providing service name</th>
      <th scope="col">Providing service description</th>
      <th scope="col">ServiceImage</th>
      <th scope="col"></th>
    </tr>
  </thead>
  <tbody>
                
               @if (providerServices!=null)
                {

                foreach (var ps in providerServices)
                {
                    foreach(var s in services)
                    {
                        if(ps.ServiceId==s.Id)
                        {
                            <tr>
                                <th scope="row">@s.Name</th>
                                  <td>@s.Description</td>
                                  <td><img src="./Images/@s.ImageUrl" class="shadow p-3 rounded" alt="..." width="75" /></td>
                                    <td><a ><svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-recycle" viewBox="0 0 16 16">
                                      <path d="M9.302 1.256a1.5 1.5 0 0 0-2.604 0l-1.704 2.98a.5.5 0 0 0 .869.497l1.703-2.981a.5.5 0 0 1 .868 0l2.54 4.444-1.256-.337a.5.5 0 1 0-.26.966l2.415.647a.5.5 0 0 0 .613-.353l.647-2.415a.5.5 0 1 0-.966-.259l-.333 1.242-2.532-4.431zM2.973 7.773l-1.255.337a.5.5 0 1 1-.26-.966l2.416-.647a.5.5 0 0 1 .612.353l.647 2.415a.5.5 0 0 1-.966.259l-.333-1.242-2.545 4.454a.5.5 0 0 0 .434.748H5a.5.5 0 0 1 0 1H1.723A1.5 1.5 0 0 1 .421 12.24l2.552-4.467zm10.89 1.463a.5.5 0 1 0-.868.496l1.716 3.004a.5.5 0 0 1-.434.748h-5.57l.647-.646a.5.5 0 1 0-.708-.707l-1.5 1.5a.498.498 0 0 0 0 .707l1.5 1.5a.5.5 0 1 0 .708-.707l-.647-.647h5.57a1.5 1.5 0 0 0 1.302-2.244l-1.716-3.004z"/>
                                            </svg>
                                        </a>
                                    </td>
                            </tr>
                        }
                    }
                }
                    
               }
                 
               <!--End List-->
  </tbody>
</table>
        @if (providerServices !=null && providerServices.Count.Equals(0))
        {
        <div class="alert alert-info"> <p>You haven't added any services on your profile</p></div>
        }
</div>

<!--List of requests-->
   </div>
    <hr/>
    <h3>Your requests</h3>
    <div class="list-group">

        @if (@ownRequests != null)
        {


            foreach (var r in @ownRequests)
            {
                <a @onclick="() => DisplayRequestDetails(r)" class="list-group-item list-group-item-action" aria-current="true">
                    <div class="d-flex w-100 justify-content-between">
                        <h5 class="mb-1">@r.Service.Name</h5>
                        <small>@r.DateAccepted.ToString("MM/dd/yyyy HH:mm")</small>
                    </div>
                    <p class="mb-1">@r.Service.Description</p>
                    <small>@r.Stage</small>
                </a>
            }
        }

        </div>

@code{

    private RequestDisplayModel? request;
    private List<RequestDisplayModel>? requsts;
    private List<RequestDisplayModel>? newRequests;
    private List<DisplayServiceModel>? services;
    private List<ProviderServiceModel>? providerServices;
    private RequestDisplayModel? newRequest;
    private List<RequestDisplayModel>? ownRequests = new()!; 


    string? ErrorMsg;
    protected override async Task OnInitializedAsync()
    {
        //await the orders
        NavManager.LocationChanged += HandleLocationChanged;
        await LoadOrders();
        await LoadRequests();

    }

    //Redandency -- should be in an injected service / an instance of this class
    private async Task LoadServices()
    {
        services = new List<DisplayServiceModel>();
        List<ServiceModel>? servicesData = new ()!;
        try
        {
            servicesData = await _serviceEndPoint.GetServices();
        }
        catch (Exception ex)
        {
            ErrorMsg = ex.Message;
        }

        foreach (var service in servicesData)
        {
            //populating a service to UI model
            var s = new DisplayServiceModel();
            s.Name = service.Name;
            s.Description = service.Description;
            s.ImageUrl = service.ImageUrl;
            s.Id = service.Id;
            s.CategoryName = service.Name;
            s.CategoryDescription = service.Description;
            s.CategoryType = service.Type;
            services.Add(s);
        }

    }

    //Same with the previous comment
    private async Task LoadRequests()
    {
        List<RequestModel>? libRequests;
        try
        {
            var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
            var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            libRequests = await _requestEndPoint.GetRequestsByProvider(UserId);

            if (libRequests != null)
            {


                foreach (var req in libRequests)
                {
                    var reqDisplay = new RequestDisplayModel();
                    foreach (var servDisplay in services)
                    {
                        if (req.ServiceId == servDisplay.Id)
                        {
                            reqDisplay.Service = servDisplay;
                            reqDisplay.DateAccepted = req.DateAccepted;
                            reqDisplay.Id = req.Id;
                            reqDisplay.Stage = req.Status;
                            reqDisplay.order = new();
                            reqDisplay.order.Id = req.OrderId;
                            reqDisplay.order.DateCreated = req.DateAccepted;
                            reqDisplay.order.IsAccepted = 1;

                        }
                    }
                    ownRequests.Add(reqDisplay);
                }
            }
            ErrorMsg = string.Empty;
        }
        catch(Exception ex)
        {
            ErrorMsg = ex.Message;
        }
    }

    //Navigating to the request detail's component and passing the required parameters
    private void DisplayRequestDetails(RequestDisplayModel btnRequest)
    {
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("requestcomponent", new Dictionary<string, object>()
        {
            ["Id"] = btnRequest?.order?.Id,
            ["sid"] = btnRequest?.order?.ServiceId,
            ["img"] = btnRequest?.Service.ImageUrl,
            ["ord"] = btnRequest?.order?.DateCreated.ToString("MM/dd/yyyy HH:mm"),
            ["ia"] = btnRequest?.order?.IsAccepted
        }), true);//not yet there
    }

    //Should be an injected service
    private async Task LoadOrders()
    {
        List<OrderModel>? libOrders = new()!;
        newRequests = new()!;
        try
        {
            await LoadServices();
           

            var user = (await _authenticationStateProvider.GetAuthenticationStateAsync()).User;
            var UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
            providerServices = await _serviceEndPoint.GetProviderServiceByProviderId(UserId);
            
           
            foreach(var ps in providerServices)
            {
                var os = await _requestEndPoint.GetAllOrdersByService(ps.ServiceId);
                libOrders.AddRange(os);
            }
            ErrorMsg = string.Empty;

            foreach(var odr in libOrders)
            {
                var req = new RequestDisplayModel()!;
                req.order = odr;
                foreach (DisplayServiceModel dsm in services)
                {
                    if (odr.ServiceId == dsm.Id)
                    {
                        req.Service = dsm;
                    }
                    
                }
                newRequests.Add(req);
            }
            
        }catch(Exception ex)
        {
            ErrorMsg = ex.Message;
        }
        
    }

   
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    public void Dispose()
    {
        NavManager.LocationChanged -= HandleLocationChanged;
    }

}