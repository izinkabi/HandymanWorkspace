@page "/requests"
@page "/requests-all"

@using Handyman_SP_UI.Pages.Services
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavManager
@inject IRequestHelper _requestHelper
@inject IProviderHelper _providerHelper

<AuthorizeView Roles="ServiceProvider">

<Authorized>
        @if (newRequests != null || requests!=null)
        {
            <!--New Requests Section-->
            <section class="container-fluid justify-content-center p-0 m-0 align-content-lg-center bg-primary bg-opacity-75">
   
                              <!--Table-->
                <div class="table-responsive shadow rounded bg-white" style="height:250px;overflow-y:scroll">
                    <div class="d-flex justify-content-center flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom bg-dark">
                        <div class="btn-toolbar mb-2 mb-md-0">
                            <div class="btn-group me-2 ">
                                <button type="button" @onclick="displayOrdersOnly" class="btn btn-sm btn-outline-secondary">Orders</button>
                                <button type="button" @onclick="displayRequestsOnly" class="btn btn-sm btn-outline-secondary">Jobs</button>
                            </div>
                            <!--Dropdown-->
                            <button type="submit"  class="btn btn-sm btn-outline-secondary dropdown-toggle" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false">
                                <span data-feather="calendar" class="align-text-bottom"></span>
                                This week
                            </button>
                            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton2">
                                <li><a class="dropdown-item" @onclick="displayCurrentWeek">Week</a></li>
                                <li><a class="dropdown-item" @onclick="displayCurrentMonth">Month</a></li>
                            </ul>
                            <!--End Dropdown-->
                        </div>
                    </div>
                    <!--Displaying orders only-->
                    @if (isOrdersDisplayed)
                    {


                        <table class="table table-striped table-sm table-hover table-responsive bg-light">
                            <!--Table header-->
                            <thead>
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Date placed</th>
                                    <th scope="col">Category</th>
                                    <th scope="col">Request title</th>
                                </tr>
                            </thead>
                            @if (newRequests.Count > 0)
                            {
                                <!--Table body-->
                                <tbody>
                                    <!--Rows-->
                                    @foreach (var nr in newRequests)
                                    {
                                        @if (nr.status < 2)
                                        {

                                            <tr @onclick="@(()=> viewNewRequest(nr.service.id,@nr.Id))">
                                                <!--Onclick test-->
                                                <td class="border-0 btn-outline-info">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lock" viewBox="0 0 16 16">
                                                        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2zM5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1z" />
                                                    </svg>
                                                </td>

                                                <td>@nr.datecreated</td>
                                                <td>@nr.service.category.description</td>
                                                <td>@nr.service.name</td>
                                            </tr>

                                        }
                                    }


                                    <!--End rows-->
                                </tbody>
                            }
                            else if(newRequests==null||newRequests.Count==0)
                            {
                               <p class="fst-italic"> You have 0 requests</p>
                            }
                            <!--End body-->
                        </table>
                    }
                    

            <!--End table-->
                </div>
            </section>


            <br />

            <!--Own requests Album-->
            <h4 class="bg-light font-monospace text-center rounded-4 shadow ">Jobs</h4>
            <!--Displaying Requests only-->
            @if (isRequestsDisplayed)
            {


                <div class="album py-5">
                    <div class="container">

                        <div class="row row-cols-1 row-cols-sm-2 row-cols-md-3 g-3" style="height:450px;overflow-y:scroll">


                            @if (requests != null && requests.Count > 0)
                            {
                                @foreach (var ownR in requests)
                                {
                                    <div class="col bg-transparent p-0 m-0" @onclick="@(()=>viewOwnRequest(ownR.req_id))">


                                        <AcceptedRequestComponent AcceptedRequestProperty="@ownR" IsOnFrontDisplay="true">

                                        </AcceptedRequestComponent>


                                    </div>
                                }
                            }
                            else
                            {
                                <span class=" text-danger">Loading you jobs...try again later</span>
                                <div class="d-flex justify-content-center">
                                    <div class="spinner-border" role="status">
                                </div>
                            </div>
                        }

                    </div>
                </div>
                </div>
            }
             <!--End Own requests Album-->
        }
        else
        {
            <!--Loading-->
            <span class="text-danger">Loading your requests...</span>
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                        
                       
                    </div>
                </div>
        }
   </Authorized>
    <NotAuthorized>
        <ServicesAlbum>

        </ServicesAlbum>
    </NotAuthorized>
    </AuthorizeView>

@code {

    List<OrderModel>? newRequests;
    IList<RequestModel>? requests;

    ServiceProviderModel? provider;

    bool isOrdersDisplayed;
    bool isRequestsDisplayed;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            await LoadOwnRequests();
            await LoadNewRequests();

            if(requests!=null && requests.Count>0)
            {
                isOrdersDisplayed = true;
                isRequestsDisplayed = true;
                foreach (var r in requests)
                {
                    if (r.req_status != 11)
                    {
                        r.req_status = _requestHelper.CheckStatus(r);
                        r.req_progress = _requestHelper.GetProgress(r);
                    }

                }


            }


        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message, ex.InnerException);
        }
    }
    /// <summary>
    /// Display / route to a request-Component
    /// </summary>
    /// <param name="sid"></param>
    /// <param name="rid"></param>
    void viewNewRequest(int sid, int rid)
    {
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("request", new Dictionary<string, object>()
            {
                ["SId"] = sid,
                ["NRId"] = rid
            }));
    }

    /// <summary>
    /// Display / route to a request-Component
    /// </summary>
    /// <param name="ownRId"></param>
    void viewOwnRequest(int ownRId)
    {
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("request", new Dictionary<string, object>()
            {
                ["ORId"] = ownRId,

            }));
    }

    /// <summary>
    /// Query requests from DB 
    /// </summary>
    /// <returns></returns>
    async Task LoadNewRequests()
    {
        provider = await _providerHelper.GetProvider();
        newRequests = new()!;
        if (provider != null)

            foreach (var service in provider.Services)
            {
                newRequests.AddRange(await _requestHelper.GetNewRequests(service.id));
            }
    }

    [Authorize(Roles ="ServiceProvider")]

    /// <summary>
    /// Get All the accepted requests
    /// </summary>
    /// <returns></returns>
    /// <exception cref="Exception"></exception>
    async Task LoadOwnRequests()
    {
        try
        {
            requests = await _requestHelper.GetOwnRequests();
        }
        catch (Exception ex)
        {
            throw new Exception(ex.Message, ex.InnerException);
        }
    }


    //Display orders only
    void displayOrdersOnly()
    {
        isOrdersDisplayed = true;
        isRequestsDisplayed = false;
    }

    //Display requests only
    void displayRequestsOnly()
    {
        isOrdersDisplayed = false;
        isRequestsDisplayed = true;
    }

    //Display the current month's data
    async Task displayCurrentMonth()
    {
        try
        {
            requests = await _requestHelper.GetCurrentMonthRequests(_providerHelper.GetProvider()?.Result?.employeeProfile?.UserId);
            if (requests != null && requests.Count > 0)
            {
                foreach (var rs in requests)
                {
                    rs.req_status = _requestHelper.CheckStatus(rs);
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    //Displaying current month requests 
    async Task displayCurrentWeek()
    {
        try
        {

           

            requests = await _requestHelper.GetCurrentWeekRequests(_providerHelper.GetProvider()?.Result?.employeeProfile?.UserId);
            if(requests!=null && requests.Count > 0)
            {
                foreach (var rs in requests)
                {
                    rs.req_status = _requestHelper.CheckStatus(rs);
                }
            }
            

        }
        catch (Exception ex)
        {
            
            throw new Exception(ex.Message,ex.InnerException);
        }
    }


}