@page "/task-c"
@page "/task"

@using Microsoft.AspNetCore.Components.Web
@implements IDisposable
@inject IRequestHelper _requestHelper 
@inject IJSRuntime JSRuntime


@if (taskModel != null)
{
        <!--Modal-->
        <div class="modal fade" id="staticBackdropTaskUpdateModal" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="staticBackdropLabel">@taskModel.tas_title Update</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        The task is paused, you can save changes or cancel them
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-danger" data-bs-dismiss="modal">Cancel</button>
                    @if (taskModel.tas_status < 3)
                    {
                        <button @onclick="Update" type="button" class="btn btn-success" data-bs-dismiss="modal">Save progress</button>
                       

                    }
                    @if(taskModel.tas_status == 3)
                    {
                            <button @onclick="Update" type="button" class="btn btn-success" data-bs-dismiss="modal">
                                 Close
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-bag-check" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M10.854 8.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708 0z" />
                                    <path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5zM2 5h12v9a1 1 0 0 1-1 1H3a1 1 0 0 1-1-1V5z" />
                                </svg>
                            </button>
                    }

                        </div>
                </div>
            </div>
        </div>
        <!--End Modal-->
    

    <!--Breadcrum-->
    <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
        <ol class="breadcrumb">
            <li class="breadcrumb-item"><a href="##" onclick="history.go(-1); return false;">Request</a></li>
            <li class="breadcrumb-item active fst-italic" aria-current="page">Task</li>
            
        </ol>
    </nav>
   
    <!--Task Header-->
    <div class="container py-4">

              <!--Task Details-->
        <div class="p-3 mb-4 bg-light rounded-3">
            <div class="container-fluid">
                <h1 class="display-5 fw-bold"> @taskModel.tas_title </h1>
                
                <p class="fs-4"><strong>Time Started:</strong> @taskModel.tas_date_started</p>
                <p class="col-md-8 fs-4"><strong>Description:</strong> @taskModel.tas_description</p>
                <hr />
                @if (!isWorkingOnTask)
                {

                    @if (taskModel.tas_status == 0)
                    {
                        <button @onclick="StartTask" class="btn btn-primary btn-lg alert-info" type="button">Start Task</button>
                    }
                    @if (taskModel.tas_status == 1)
                    {
                        <button @onclick="WorkOnTask"  class="btn btn-primary btn-lg alert-secondary" type="button">Work on it</button>
                    }
                    @if (taskModel.tas_status == 2)
                    {
                        <button @onclick="FinishTask"  class="btn btn-primary btn-lg alert-success" type="button">Finish it</button>
                    }
                }else
                {

                    @if (taskModel.tas_status < 3)
                    {


                        <div class="card mb-3" style="max-width: 540px;">
                            <div class="row g-0">
                            <div class="col-md-4">
                                <img src="./images/handymangif.gif" class="img-fluid rounded-start" alt="...">
                            </div>
                            <div class="col-md-8">
                                <div class="card-body">
                                    <p class="card-text text-decoration-underline">Keep on working on it, you are getting closer to finish</p>
                                    <button data-bs-toggle="modal" data-bs-target="#staticBackdropTaskUpdateModal" class="btn btn-outline-secondary btn-md mb-2" type="button">Update</button>  <br />
                                    <small class="text-muted py-2 fst-italic">Last modified: @lastModeified.ToLongTimeString() </small>
                                </div>
                            </div>
                        </div>
                    </div>
                    }

                    @if (taskModel.tas_status == 3)
                    {


                        <div class="card mb-3" style="max-width: 540px;">
                            <div class="row g-0">
                                <div class="col-md-4">
                                    <img src="./images/handymangif.gif" class="img-fluid rounded-start" alt="...">
                                </div>
                                <div class="col-md-8">
                                    <div class="card-body">
                                        <p class="card-text text-decoration-underline">Keep on working on it, you are getting closer to finish</p>
                                        <button data-bs-toggle="modal" data-bs-target="#staticBackdropTaskUpdateModal" class="btn btn-outline-success btn-md mb-2" type="button">Done!</button>  <br />
                                        <small class="text-muted py-2 fst-italic">Last modified: @lastModeified.ToLongTimeString() </small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }

            </div>
        </div>

        <!--Task duration-->
        @if (!isWorkingOnTask)
        {

           

        <div class="row align-items-md-stretch justify-content-center">
            <div class="col-md-6 align-content-center">
                <div class="p-3 text-bg-dark rounded-3">
                    <h2>Duration</h2>
                   
                        @if (taskModel.tas_status == 0)
                        {
                            <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar" style="width: 0%">0%</div>  <!--This will be implemented by duration of the task-->
                            </div>
                        }
                        @if (taskModel.tas_status == 1)
                        {
                            <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar" style="width: 25%">25%</div>  <!--This will be implemented by duration of the task-->
                            </div>
                        }
                        @if (taskModel.tas_status == 2)
                        {
                            <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar" style="width: 50%">50%</div>  <!--This will be implemented by duration of the task-->
                            </div>
                        }
                        @if (taskModel.tas_status == 3)
                        {
                            <div>
                                <p class="text-center mb-1 text-muted fst-italic">Finished on @taskModel.tas_date_finished</p>
                                </div>
                            <div class="progress" role="progressbar" aria-label="Example with label" aria-valuenow="25" aria-valuemin="0" aria-valuemax="100">
                                <div class="progress-bar" style="width: 100%">100%</div>  <!--This will be implemented by duration of the task-->
                            </div>
                        }

                </div>
               
            </div>
           
        </div>
        }
    </div>
}else
{
    <!--Task placeholder-->
    <div class="col-md-6">
        <div class="card border-0" aria-hidden="true">
            <img src="..." class="card-img-top" alt="...">
            <div class="card-body">
                <h5 class="card-title placeholder-glow">
                    <span class="placeholder col-6"></span>
                </h5>

                <p class="card-text placeholder-glow">
                    <span class="placeholder col-7"></span>
                    <span class="placeholder col-4"></span>
                    <span class="placeholder col-4"></span>
                    <span class="placeholder col-6"></span>
                    <span class="placeholder col-8"></span>
                </p>
                <a href="#" tabindex="-1" class="btn btn-primary disabled placeholder col-6"></a>
            </div>
        </div>
    </div>
}

@code {

    int TaskId;
    TaskModel? taskModel;
    TimeOnly lastModeified;
    bool isUpdating;

    //Timer taskTtimer;

    [Parameter]
    [SupplyParameterFromQuery]
    public int Id { get { return TaskId; } set { TaskId = value; } }

    [Parameter]
    public EventCallback<TaskModel> OnTaskUpdate { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            taskModel = await _requestHelper.GetTask(TaskId);
            DeliverTask();
            
        }catch(Exception ex)
        {
            throw new Exception(ex.Message, ex.InnerException);
        }
    }

    void DeliverTask()
    {
        if(taskModel.tas_status < 3)
        {
            //the task is not yet complete       
            taskModel.tas_duration = (taskModel.tas_date_finished - taskModel.tas_date_started).Days;
            taskModel.tas_date_finished = DateTime.Now;
        }
    }

    //**********************Updating the task methods******************************//

    /// <summary>
    /// Start working a task
    /// </summary>
    void StartTask()
    {
        if (taskModel != null && taskModel.tas_status < 1)
        {
            taskModel.tas_status = 1;
            isWorkingOnTask = true;
        }
       
    }



    /// <summary>
    /// Continue working with a started task
    /// </summary>
    bool isWorkingOnTask;
    void WorkOnTask()
    {
        if (taskModel != null && (taskModel.tas_status == 1))
        {
            taskModel.tas_status = 2;
            isWorkingOnTask = true;
        }
       
    } 

    /// <summary>
    /// Finish the task
    /// </summary>
    void FinishTask()
    {
        if (taskModel != null && (taskModel.tas_status == 2))
        {
            taskModel.tas_status = 3;
            taskModel.tas_date_finished = DateTime.UtcNow;
            isWorkingOnTask = true;
           

        }

    }

    //**********************End Updating the task methods******************************//

    /// <summary>
    /// Pause the task / temporarily stop working on the task
    /// </summary>
    async Task Update()
    {
        isWorkingOnTask = false;
        try
        {

            if (taskModel != null)
                taskModel.tas_date_finished = DateTime.Now;
            await _requestHelper.UpdateTask(taskModel);
            lastModeified = TimeOnly.FromDateTime(taskModel.tas_date_finished);
            
        }
        catch (Exception)
        {
            
            throw;
        }
    }

    //reload the html page using js
    IJSObjectReference? JSreloadReference;
    [JSInvokable]
    async void Reload()
    {
        JSreloadReference = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "/assets/dist/js/reload.js");
        await JSreloadReference.InvokeVoidAsync("ReloadPage");
    }

    public void Dispose()
    {
       // taskTtimer.Dispose();
    }
}
