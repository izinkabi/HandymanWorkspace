<!--This component deals with requests for service providers, specifically a new request-->
@page "/request-c"
@page "/request/"


@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavManager;
@inject IRequestHelper _requestHelper


<AuthorizeView Roles="Owner,Member">
      <Authorized>

        
        @if (newRequest != null && !isAccepted)
        {
           
            <section class="container container-fluid row p-0 m-0 justify-content-center">

           
            <!--New request / Unaccepted request-->
                    <NewRequestComponent NewRequestModelProperty="@newRequest">

                    </NewRequestComponent>
                    @if (!isAccepted)
                    {
                        <button type="submit" @onclick="AcceptRequest" class="btn btn-lg btn-outline-primary">Accept</button>
                    }
            <!--End New Request-->
             </section>
        }
        else if(ownRequest!=null && isAccepted)
        {
            <AcceptedRequestComponent AcceptedRequestProperty="ownRequest" OnViewTask="ViewTask"/>

           <!--End Accepted-->
  
        }
        else
        {
            <span class="visually-visible text-center text-danger">Loading a request...</span>
            <div class="d-flex justify-content-center">
                
                <div class="spinner-border" role="status">    
                </div>
                
            </div>
        }
    </Authorized>
    <NotAuthorized>
        <h1>
            Please LogIn
        </h1>
    </NotAuthorized>
</AuthorizeView>

@code {
    OrderModel? newRequest;
    RequestModel? ownRequest;

    int ownRequestId;
    int newRequestId;
    int serviceId;

    bool isAccepted;  

    [Parameter]
    public RequestModel? OwnRequestDisplayProperty { get { return ownRequest; } set { ownRequest = value; } }

    [Parameter]
    public OrderModel? NewRequestDisplayPropertey { get { return newRequest; } set { newRequest = value; } }

    //Service ID
    [Parameter]
    [SupplyParameterFromQuery]
    public int SId 
    {
        get { return serviceId; }
        set { serviceId = value; }
    }
    //New Request / Order ID
    [Parameter]
    [SupplyParameterFromQuery]
    public int NRId 
    {
        get {return newRequestId; }
        set {newRequestId = value; } 
    }

    //Own / real request ID
    [Parameter]
    [SupplyParameterFromQuery]
    public int ORId 
    { 
        get {return  ownRequestId; } 
        set { ownRequestId = value; } 
    } 


    protected override async Task OnInitializedAsync()
    {
        //newRequest = new()!;
        //ownRequest = new()!;

        try
        {

            if (ownRequest==null && newRequest==null)
            {
                if (newRequestId != 0 && SId != 0)
                {
                    var req = await _requestHelper.GetNewRequest(serviceId, newRequestId);

                    if (await _requestHelper.IsAccepted(req))
                    {

                        ownRequest = await _requestHelper.ConfirmAccepted(req);
                        isAccepted = true;
                        await UpdateRequests();
                        newRequest = null;
                    }
                    else
                    {
                        newRequest = req;
                    }
                }

            }



            if (ownRequestId != 0)
            {
                if(newRequest==null && ownRequest==null)
                    ownRequest = await _requestHelper.GetOwnRequest(ownRequestId);
                isAccepted = true;
                UpdateRequests();
            }



        }catch(Exception ex)
        {
            throw new Exception(ex.Message,ex.InnerException);
        }
    }

    //Accept the new request
    async Task AcceptRequest()
    {
        try
        {
            //Update the DB 
            await _requestHelper.AcceptRequest(newRequest); ///----should return the accepted request
            //switch label to accepted


            //Make new instance of an accepted request
            ownRequest = new RequestModel()!;
            ownRequest.tasks = new()!;
            //Populate the request
            ownRequest.req_datecreated = newRequest.datecreated;
            ownRequest.req_orderid = newRequest.Id;
            ownRequest.tasks = newRequest.Tasks.ToList();
            ownRequest.Service = newRequest.service;
            ownRequest.req_status = 1;

            //make sure there is no new request anymore
            newRequest = null;
            isAccepted = true;
            NRId = 0;
            StateHasChanged();
        }catch(Exception ex)
        {
            throw new Exception(ex.Message, ex.InnerException);
        }
    }

    //View a task of your request
    async Task ViewTask(int taskId)
    {

        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("task", new Dictionary<string, object>()
            {
                ["id"] = taskId
            }));


    }


    //Updating the request and its relevent tasks
    async Task UpdateRequests()
    {
        try
        {
            if(ownRequest!=null)
            {
                if (ownRequest.req_status != 11)
                {
                    ownRequest.req_status = _requestHelper.CheckStatus(ownRequest);
                    ownRequest.req_progress = _requestHelper.GetProgress(ownRequest);
                }
                
            }
            

            //await _requestHelper.UpdateRequest(requestUpdate);
        }
        catch (Exception)
        {
                
            throw;
        }
    }

}
