<!--This component deals with requests for service providers, specifically a new request-->
@page "/request"

@using Microsoft.AspNetCore.Components.Web
@inject NavigationManager NavManager;
@inject IRequestHelper _requestHelper
@attribute [Authorize]


@if (Errors.Count > 0)
{
    @foreach(string error in Errors)
    {
        <span>@error</span>
    }
}

        @if (newRequest != null && !isAccepted)
        {
            <!--New request / Unaccepted request-->
            <NewRequestComponent NewRequestModelProperty="@newRequest"  OnAcceptRequest="AcceptRequest"/>
            <!--End New Request-->
          
        }

        @if(ownRequest!=null && isAccepted)
        {
            <AcceptedRequestComponent AcceptedRequestProperty="@ownRequest" OnViewTask="ViewTask"/>

                <!--End Accepted-->
        }
        @if(ownRequest==null)
        {
            <span class="visually-visible text-center text-danger">Loading a request...</span>
            <div class="d-flex justify-content-center">
                
                <div class="spinner-border" role="status">    
                </div>
                
            </div>
        }


@code {
    OrderModel? newRequest = new OrderModel();
    RequestModel? ownRequest = new RequestModel();

    int ownRequestId;
    int newRequestId;
    int serviceId;
    List<string> Errors = new List<string>();
    bool isAccepted;  

    [Parameter]
    public RequestModel? OwnRequestDisplayProperty { get { return ownRequest; } set { ownRequest = value; } }

    [Parameter]
    public OrderModel? NewRequestDisplayPropertey { get { return newRequest; } set { newRequest = value; } }

    //Service ID
    [Parameter]
    [SupplyParameterFromQuery]
    public int SId 
    {
        get { return serviceId; }
        set { serviceId = value; }
    }
    //New Request / Order ID
    [Parameter]
    [SupplyParameterFromQuery]
    public int NRId 
    {
        get {return newRequestId; }
        set {newRequestId = value; } 
    }

    //Own / real request ID
    [Parameter]
    [SupplyParameterFromQuery]
    public int ORId 
    { 
        get {return  ownRequestId; } 
        set { ownRequestId = value; } 
    } 


    protected override async Task OnInitializedAsync()
    {
        //newRequest = new()!;
        //ownRequest = new()!;

        try
        {
            if (newRequestId != 0 && SId != 0)
            {
                var req = await _requestHelper.GetNewRequest(serviceId, newRequestId);

                if (await _requestHelper.IsAccepted(req))
                {

                    ownRequest = await _requestHelper.ConfirmAccepted(req);
                    isAccepted = true;
                    UpdateRequests();
                    newRequest = null;
                }
                else
                {
                    newRequest = req;
                }
            }

            if (ownRequestId != 0)
            {
                if(newRequest.Id == 0)
                {

                    ownRequest = await _requestHelper.GetOwnRequest(ownRequestId);
                    isAccepted = true;
                    UpdateRequests();
                }

            }



        }catch(Exception ex)
        {
            Errors.Add(ex.Message);
        }
    }

    //Accept the new request
    private async Task AcceptRequest(OrderModel order)
    {
        try
        {
            //Update the DB
            await _requestHelper.AcceptRequest(order); ///----should return the accepted request
            //switch label to accepted
            isAccepted = true;

            //Make new instance of an accepted request
            var ownRequest = new RequestModel()!;
            ownRequest.tasks = new()!;
            //Populate the request
            ownRequest.req_datecreated = order.datecreated;
            ownRequest.req_orderid = order.Id;
            ownRequest.tasks = order.Tasks.ToList();
            ownRequest.Service = order.service;
            ownRequest.req_status = 1;

            //make sure there is no new request anymore
            newRequest = null;
            UpdateRequests();
            await InvokeAsync(StateHasChanged);


        }
        catch (Exception ex)
        {
            Errors.Add(ex.Message);
        }
    }

    //View a task of your request
    async Task ViewTask(int taskId)
    {

        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("task", new Dictionary<string, object>()
            {
                ["id"] = taskId
            }));

    }


    //Updating the request and its relevent tasks
    void UpdateRequests()
    {
        try
        {
            if(ownRequest!=null)
            {
                if (ownRequest.req_status != 11)
                {
                    ownRequest.req_status = _requestHelper.CheckStatus(ownRequest);
                    ownRequest.req_progress = _requestHelper.GetProgress(ownRequest);
                }
                
            }
            

            //await _requestHelper.UpdateRequest(requestUpdate);
        }
        catch (Exception ex)
        {
                
            Errors.Add(ex.Message);
        }
    }

 

}
