@page "/requests"
@page "/requests-all"

@using Handyman_SP_UI.Pages.WorkShop.Requests
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavManager
@inject IRequestHelper _requestHelper
@inject IProviderHelper _providerHelper
@inject IJSRuntime JSRuntime


@if (Errors!=null)
{
   
   <h4 class="text-danger">@Errors</h4>
   
}
<AuthorizeView Roles="Owner,Member">

<Authorized>
      <!--New Requests Section-->
      <section class="container-fluid justify-content-center  m-auto align-content-lg-center ">
   
          <!--Table-->
                <div class="table-responsive shadow rounded bg-white" >
                    <div class="d-flex justify-content-center flex-wrap flex-md-nowrap align-items-center pt-3 pb-2 mb-3 border-bottom bg-dark">
                        <div class="btn-toolbar mb-2 mb-md-0">
                            <div class="btn-group me-2 ">
                                <button type="button" @onclick="displayOrdersOnly" class="btn btn-sm btn-outline-secondary">
                                    Orders
                                <span class="badge text-bg-success">@NumberOfOrders</span>
                                
                                </button>
                                <button type="button" @onclick="displayRequestsOnly" class="btn btn-sm btn-outline-secondary">
                                Jobs 
                                @if (requests != null)
                                {
                                    <span class="badge text-bg-info">@requests.Count</span>
                                }
                                
                            </button>
                            </div>
                            <!--Dropdown-->
                            <button type="submit"  class="btn btn-sm btn-outline-secondary dropdown-toggle" id="dropdownMenuButton2" data-bs-toggle="dropdown" aria-expanded="false">
                                <span data-feather="calendar" class="align-text-bottom"></span>
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-calendar-event" viewBox="0 0 16 16">
                                <path d="M11 6.5a.5.5 0 0 1 .5-.5h1a.5.5 0 0 1 .5.5v1a.5.5 0 0 1-.5.5h-1a.5.5 0 0 1-.5-.5v-1z" />
                                <path d="M3.5 0a.5.5 0 0 1 .5.5V1h8V.5a.5.5 0 0 1 1 0V1h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V3a2 2 0 0 1 2-2h1V.5a.5.5 0 0 1 .5-.5zM1 4v10a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1V4H1z" />
                            </svg>
                            </button>
                            <ul class="dropdown-menu dropdown-menu-dark" aria-labelledby="dropdownMenuButton2">
                                <li><a class="dropdown-item" @onclick="displayCurrentWeek">Week</a></li>
                                <li><a class="dropdown-item" @onclick="displayCurrentMonth">Month</a></li>
                            </ul>
                            <!--End Dropdown-->
                        </div>
                    </div>
                    <!--Displaying orders only-->
                    @if (isOrdersDisplayed)
                    {
                        
                       <OrdersComponent />
                       
                    }
                    

            <!--End table-->
                </div>
           
      </section>

        <br />
        @if (isRequestsDisplayed)
        {
            @if (requests != null && requests.Count > 0)
            {
                <!--Own requests Album-->
                <h4 class="bg-light font-monospace text-center rounded-4 shadow ">Jobs</h4>
                <!--Displaying Requests only-->

                <div class="album py-2 m-auto shadow rounded bg-light">
                    <div class="container container-fluid">

                        <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 " style="height:480px;overflow-y:scroll">
                            @foreach (var ownR in requests)
                            {
                                <div class="col p-0 m-0" @onclick="@(()=>viewOwnRequest(ownR.req_id))">
                                    <AcceptedRequestComponent AcceptedRequestProperty="@ownR" IsOnFrontDisplay="true" OnViewTask="OnViewTask"/>                                          
                                </div>
                            }                           
                        </div>
                    </div>
                </div>

                <!--End Own requests Album-->


                <!--Back to top button-->
                <button @onclick="@BackToTop" class="float-end border-0 bg-transparent">
                    <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-arrow-up-circle border-0" viewBox="0 0 16 16">
                        <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z" />
                    </svg>
                </button>
                <!--End Back to top button-->
            }
            else if (requests!=null && requests.Count == 0)
            {
                <span class=" text-danger">0 requests</span>
            }
            
            @if (requests == null)
            {
                <span class=" text-danger">Loading your jobs...try again</span>
                <div class="d-flex justify-content-center">
                    <div class="spinner-border" role="status">
                    </div>
                </div>
            }
        }
        

       
    </Authorized>
    <NotAuthorized>
        <h2 class="text-warning">No Work Shop Found</h2>
        <p>
            Looks like are not authorized for this,but you can <a href="/Identity/Account/WorkShopRegister"> click here</a> to create a WorkShop or you <a href="/Identity/Account/WorkShopRegister">click here</a> to join a WorkShop.
        </p>
    </NotAuthorized>
    </AuthorizeView>

@code {


    List<RequestModel> requests = new()!;
    int NumberOfOrders;
    bool isOrdersDisplayed;
    bool isRequestsDisplayed;
    string Errors;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            try
            {
                requests = await _requestHelper.GetOwnRequests();
                foreach(var service in  await _providerHelper.GetWorkShopServices())
                {
                    var listoforders = await _requestHelper.GetNewRequests(service.originalServiceId);
                    foreach (var o in listoforders)
                    {
                        if (o.status == 0)
                        {
                            NumberOfOrders++;
                        }
                    }
                }
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Errors = ex.Message;
                throw new Exception(ex.Message, ex.InnerException);

            }

            //Check own requests status
            if (requests != null && requests.Count > 0)
            {
                //Display both the new and old requests
                isOrdersDisplayed = true;
                isRequestsDisplayed = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Errors = ex.Message;
            throw new Exception(ex.Message, ex.InnerException);

        }
    }

    //Go to top page
    [JSInvokable]
    private async Task BackToTop()
    {
        await JSRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    /// <summary>
    /// Display / route to a request-Component
    /// </summary>
    /// <param name="ownRId"></param>
    void viewOwnRequest(int ownRId)
    {
        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("request", new Dictionary<string, object>()
        {
            ["ORId"] = ownRId,

        }));
    }

    void OnViewTask(int o)
    {

    }


    //Display orders only
    void displayOrdersOnly()
    {
        isOrdersDisplayed = true;
        isRequestsDisplayed = false;
    }

    //Display requests only
    void displayRequestsOnly()
    {
        isRequestsDisplayed = true;
        isOrdersDisplayed = false;
    }

    //Display the current month's requests
    async Task displayCurrentMonth()
    {
        try
        {
            requests = await _requestHelper.GetCurrentMonthRequests();
            if(requests is null)
            {
                return;
            }
            if (requests != null && requests.Count > 0)
            {
                foreach (var rs in requests)
                {
                    rs.req_status = _requestHelper.CheckStatus(rs);
                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    //Displaying current week requests 
    async Task displayCurrentWeek()
    {
        try
        {
            requests = await _requestHelper.GetCurrentWeekRequests();
            if(requests!=null && requests.Count > 0)
            {
                foreach (var rs in requests)
                {
                    rs.req_status = _requestHelper.CheckStatus(rs);
                }
            }
            

        }
        catch (Exception ex)
        {
            
            throw new Exception(ex.Message,ex.InnerException);
        }
    }

    private IJSObjectReference importedDHTML;
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // import the script from the file
            importedDHTML = await JSRuntime.InvokeAsync<IJSObjectReference>(
                "import", "/assets/dist/js/reload.js");

            //Initialize
            await importedDHTML.InvokeVoidAsync("ReloadPageThreeSecDelay");
        }
    }
}