@page "/orders-component"
@page "/orders"
@using Microsoft.AspNetCore.SignalR.Client

@inject IProviderHelper _providerHelper
@inject IRequestHelper _requestHelper
@inject NavigationManager NavManager
@attribute [Authorize]



        @if (Errors.Count > 0)
        {
            @foreach(string error in Errors)
            {
                <p>@error</p>
            }
        }

        @if (IsConnected)
        {
            <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check-circle-fill" viewBox="0 0 16 16">
                    <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                </svg>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                You are online
               
            </div>
            @if (notificationOrders.Count > 0)
            {
                <div class="alert alert-success alert-dismissible fade show text-center" role="alert">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-info-square-fill" viewBox="0 0 16 16">
                        <path d="M0 2a2 2 0 0 1 2-2h12a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2zm8.93 4.588-2.29.287-.082.38.45.083c.294.07.352.176.288.469l-.738 3.468c-.194.897.105 1.319.808 1.319.545 0 1.178-.252 1.465-.598l.088-.416c-.2.176-.492.246-.686.246-.275 0-.375-.193-.304-.533L8.93 6.588zM8 5.5a1 1 0 1 0 0-2 1 1 0 0 0 0 2z" />
                    </svg>
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                        <p>You have @notificationOrders.Count new order(s) </p>
                </div>
            }
        }
        else
        {
            
                @foreach (string msg in connectionMessages)
                {
                    <p>@msg</p>
                }
            
        }

        @if (newRequests != null)
        {
            <!--New Requests Section-->
               <!--Table-->
                <div class="table-responsive shadow rounded bg-white" style="height:250px;overflow-y:scroll">
                   
                    <!--Displaying orders only-->
                    


                        <table class="table table-striped table-sm table-hover table-responsive bg-light m-auto">
                            <!--Table header-->
                            <thead>
                                <tr>
                                    <th scope="col"></th>
                                    <th scope="col">Date placed</th>
                                    <th scope="col">Category</th>
                                    <th scope="col">Request title</th>
                                    <th>
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-cash-coin" viewBox="0 0 16 16">
                                            <path fill-rule="evenodd" d="M11 15a4 4 0 1 0 0-8 4 4 0 0 0 0 8zm5-4a5 5 0 1 1-10 0 5 5 0 0 1 10 0z" />
                                            <path d="M9.438 11.944c.047.596.518 1.06 1.363 1.116v.44h.375v-.443c.875-.061 1.386-.529 1.386-1.207 0-.618-.39-.936-1.09-1.1l-.296-.07v-1.2c.376.043.614.248.671.532h.658c-.047-.575-.54-1.024-1.329-1.073V8.5h-.375v.45c-.747.073-1.255.522-1.255 1.158 0 .562.378.92 1.007 1.066l.248.061v1.272c-.384-.058-.639-.27-.696-.563h-.668zm1.36-1.354c-.369-.085-.569-.26-.569-.522 0-.294.216-.514.572-.578v1.1h-.003zm.432.746c.449.104.655.272.655.569 0 .339-.257.571-.709.614v-1.195l.054.012z" />
                                            <path d="M1 0a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h4.083c.058-.344.145-.678.258-1H3a2 2 0 0 0-2-2V3a2 2 0 0 0 2-2h10a2 2 0 0 0 2 2v3.528c.38.34.717.728 1 1.154V1a1 1 0 0 0-1-1H1z" />
                                            <path d="M9.998 5.083 10 5a2 2 0 1 0-3.132 1.65 5.982 5.982 0 0 1 3.13-1.567z" />
                                        </svg>
                                    </th>
                                </tr>
                            </thead>
                            @if (newRequests.Count > 0 || notificationOrders.Count > 0)
                            {
                                <!--Table body-->
                                <tbody>
                            @foreach (var o in notificationOrders)
                            {
                                @if (o.status == 0)
                                {

                                    <tr class="bg-success" @onclick="@(()=> viewOrder(o.service.id,o.Id))">

                                        <!--Onclick test-->
                                        <td class="border-0 btn-outline-info">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lock" viewBox="0 0 16 16">
                                                <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2zM5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1z" />
                                            </svg>
                                        </td>

                                        <td>@o.datecreated</td>
                                        <td>@o.service.category.description</td>
                                        <td>@o.service.name</td>
                                        <td>
                                            @if (Prices.Count > 0)
                                            {
                                                @foreach (var price in Prices)
                                                {
                                                    @if (price.Id == o.service.PriceId)
                                                    {
                                                        <strong>R </strong>
                                                        @price.base_Price
                                                        break;
                                                    }
                                                }
                                            }
                                        </td>
                                        <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">
                                            <span class="visually-hidden">New alerts</span>
                                        </span>
                                    </tr>

                                }
                            }
                                    <!--Rows-->
                                    @foreach (var nr in newRequests)
                                    {
                                        @if (nr.status < 2)
                                        {

                                          <tr @onclick="@(()=> viewOrder(nr.service.id,nr.Id))">
                                        
                                                <!--Onclick test-->
                                                <td class="border-0 btn-outline-info">
                                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-lock" viewBox="0 0 16 16">
                                                        <path d="M8 1a2 2 0 0 1 2 2v4H6V3a2 2 0 0 1 2-2zm3 6V3a3 3 0 0 0-6 0v4a2 2 0 0 0-2 2v5a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V9a2 2 0 0 0-2-2zM5 8h6a1 1 0 0 1 1 1v5a1 1 0 0 1-1 1H5a1 1 0 0 1-1-1V9a1 1 0 0 1 1-1z" />
                                                    </svg>
                                                </td>

                                                <td>@nr.datecreated</td>
                                                <td>@nr.service.category.description</td>
                                                <td>@nr.service.name</td>
                                                <td>
                                                    @if(Prices.Count>0)
                                                    {
                                                        @foreach (var price in Prices)
                                                        {
                                                            @if (price.Id == nr.service.PriceId)
                                                            {
                                                                <strong>R </strong>
                                                                @price.base_Price
                                                                break;
                                                            }
                                                        }
                                                    }
                                                </td>
                                            <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">
                                                <span class="visually-hidden">New alerts</span>
                                            </span>
                                          </tr>

                                        }
                                    }
                                    

                                    <!--End rows-->
                                </tbody>
                            }
                            else if(newRequests!=null && newRequests.Count==0)
                            {
                                <span>Loading you orders...please wait</span>
                                <div class="d-flex justify-content-end">
                                    <div class="spinner-border" role="status">
                                    </div>
                                </div>
                            }else if(newRequests==null)
                            {
                                <span>Loading you orders...please wait</span>
                                <div class="d-flex justify-content-end">
                                    <div class="spinner-border" role="status">
                                    </div>
                                </div>
                            }
                            <!--End body-->
                        </table>
                    
                    

            <!--End table-->
                </div>
           

        }

@if (Errors.Count>0)
{
    @foreach(var error in Errors)
    {
     <h4 class="text-danger">@error</h4>
    }
    
}

@code {
    private List<string> Errors = new List<string>();
    private List<OrderModel>? newRequests = new List<OrderModel>();
    private ServiceProviderModel? provider;
    private List<PriceModel> Prices = new List<PriceModel>();
    List<string> connectionMessages = new List<string>();
    List<OrderModel> notificationOrders = new List<OrderModel>();


    private HubConnection? hubConnection;
    protected override async Task OnInitializedAsync()
    {
        try
        {

            await LoadNewRequests();
            if (newRequests.Count > 0)
            {
                foreach (var order in newRequests)
                {
                    var price = await _providerHelper.GetServicePrice(order.service.PriceId);
                    if(price!=null)
                        Prices.Add(price);
                }
            }

            //Initialize the hubConnection
            hubConnection = new HubConnectionBuilder()
               .WithUrl(NavManager.ToAbsoluteUri("/reqHub"))
               .WithAutomaticReconnect()
               .Build();

            //Client Side
            //Reciever of the message
            hubConnection.On<OrderModel>(("ReceiveOrder"), (order) =>
            {
                notificationOrders.Clear();
                notificationOrders.Add(order);
                InvokeAsync(StateHasChanged);
            });

            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            connectionMessages.Add(ex.Message);
        }

    }

    //Is Connected
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    /// <summary>
    /// Display / route to a request-Component
    /// </summary>
    /// <param name="sid"></param>
    /// <param name="rid"></param>
    void viewOrder(int sid, int rid)
    {

        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("request", new Dictionary<string, object>()
            {
                ["SId"] = sid, //service id
                ["NRId"] = rid //new requests id
            }));
    }

    /// <summary>
    /// Query requests from DB
    /// </summary>
    /// <returns></returns>

    async Task LoadNewRequests()
    {
        provider = await _providerHelper.GetProvider();

        if (provider != null && provider.Services.Count>0)
        {

            foreach (var service in provider.Services)
            {
                newRequests.AddRange(await _requestHelper.GetNewRequests(service.id));
            }

            //if (notificationOrders.Count == 0)
            //{
            //    notificationOrders = newRequests;
            //}
        }
    }

    //Get the prices of the services
    async Task<PriceModel> GetPrice(int priceId)
    {
        try
        {
            var price = await _providerHelper.GetServicePrice(priceId);
            if (price != null)
                return price;
            else
                return new PriceModel();
        }
        catch (Exception ex)
        {

            Errors.Add($"Error:{ex.Message}");
            return null;
        }
    }
}
