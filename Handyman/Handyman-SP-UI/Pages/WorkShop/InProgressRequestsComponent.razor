@page "/in-progress-requests" 

@inject NavigationManager NavManager
@inject IRequestHelper _requestHelper
@inject IProviderHelper _providerHelper


@if (Errors.Count > 0)
{
    @foreach(var error in Errors)
    {
        <p>@error</p>
    }
}

@if (requests!=null && requests.Count > 0)
{
    <!--Own requests Album-->
        <h4 class="bg-light font-monospace text-center rounded-4 shadow ">Jobs</h4>
               
        <div class="album py-2 m-auto shadow rounded bg-light">
            <div class="container container-fluid">

                <div class="row row-cols-1 row-cols-sm-2 row-cols-lg-3 " style="height:480px;overflow-y:scroll">
                    @foreach (var ownR in requests)
                    {
                        <div class="col m-auto" @onclick="@(()=>viewOwnRequest(ownR.req_id))">
                            <AcceptedRequestComponent AcceptedRequestProperty="@ownR" IsOnFrontDisplay="true" OnViewTask="OnViewTask"/>                                          
                        </div>
                    }                           
                </div>
            </div>
        </div>
    <!--End Own requests Album-->
}
else
{
    <p class="fst-italic text-bg-info">0 requests</p>
}

@code {

    private List<string> Errors = new List<string>();
    private List<RequestModel> requests = new List<RequestModel>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            requests = await _requestHelper.GetOwnRequests();
            
        }
        catch (Exception ex)
        {
            Errors.Add($"Error: {ex.Message}");
            throw new Exception(ex.Message, ex.InnerException);

        }
    }

    void OnViewTask(int o)
    {

    }
    //View a request
    void viewOwnRequest(int ownRId)
    {
            NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("request", new Dictionary<string, object>()
            {
                ["ORId"] = ownRId,

            }));
    }

    //View a task of your request
    async Task ViewTask(int taskId)
    {

        NavManager.NavigateTo(NavManager.GetUriWithQueryParameters("task", new Dictionary<string, object>()
        {
            ["id"] = taskId
        }));

    }

}
