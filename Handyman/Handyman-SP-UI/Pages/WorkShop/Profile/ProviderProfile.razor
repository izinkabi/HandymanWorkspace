@page "/provider-profile"
@page "/profile"

@inject IJSRuntime JsRuntime
@inject IProviderHelper _providerHelper
@inject IConfiguration _config
@inject NavigationManager NavManager

<AuthorizeView Context="Auth" Roles="ServiceProvider">

<Authorized>
@if (providerModel != null && providerModel.employeeProfile!=null)
{
        <div class="row mb-2">
        <div class="col-md-6">
            <div class="row g-0 border rounded overflow-hidden flex-md-row mb-4 shadow-sm h-md-250 position-relative">
                <div class="col p-4 d-flex flex-column position-static">
                    <strong class="d-inline-block mb-2 text-primary">Personal Information</strong>
                    <h5>Name(s):@providerModel.employeeProfile.Names</h5><br />
                    <h5>Gender:@providerModel.employeeProfile.Gender</h5>  <br />
                    <p class="mb-1 text-muted">Date of birth:@providerModel.employeeProfile.DateOfBirth.ToShortDateString()</p>
                </div>
                <div class="col-auto d-none d-lg-block">
                <img src="@(CreateWebPath(providerModel.employeeProfile.ImageUrl))" width="150" height="250" >

                </div>
            </div>
        </div>
        <!--End Employee profile-->

        
        @if (providerModel.Services.Count > 0)
        {
           <AuthorizeView Roles="Owner,Member">
            <div class="col-md-6 m-auto">
                <div class="position-sticky" style="top: 2rem;">
                    <div class="p-4 mb-3 bg-light rounded">
                        <h4 class="fst-italic">About</h4>
                        <h3 class="mb-0">@providerModel.Services.ElementAt(0).category.name field and more...</h3>
                        <div class="mb-1 text-muted">Date Employed:@providerModel.DateEmployed</div>
                    </div>
                </div>
            </div>
           </AuthorizeView>
                    <article class="blog-post rounded-2" role="document">


                        <h3 class="text-center shadow">List of your Services</h3>
                        <p class="text-center mb-1 text-muted fst-italic">You can add more services to broaden your field</p>

                        <table class="table table-hover shadow-bg  bg-light" style="height:200px;overflow-y:scroll">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Category</th>
                                </tr>
                            </thead>
                            <tbody class="table">
                                @foreach (var service in @providerModel.Services)
                                {
                                    <tr>
                                        <td>@service.name</td>
                                        <td>@service.category.description</td>
                                        <td>@service.category.name</td>
                                    </tr>
                                }
                            </tbody>
                            <tfoot>
                                <tr>
                                    <td>Totals</td>
                                    <td>@providerModel.Services.Count</td>
                                </tr>
                            </tfoot>

                        </table>


                    </article>

           
       }
        
       
        </div>

           
            <div class="col-md-12 text-center">
                    @if (providerModel.Services.Count > 0)
                    {

                    

                    <div class="accordion accordion-flush rounded shadow" id="accordionExample" >
                            <div class="accordion-item panel">
                                <h2 class="accordion-header" id="headingOne">
                                    <button class="accordion-button px-6" data-bs-toggle="collapse" data-bs-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                        <strong class="text-capitalize text-center fa-italic">ADD SERVICES</strong>
                                        <hr />
                                    </button>
                                </h2>
                                <div id="collapseOne" class="accordion-collapse collapse show" aria-labelledby="headingOne">
                                <div class="accordion-body" style="height:550px;overflow-y:scroll">
                                        <Handyman_SP_UI.Pages.WorkShop.Services.ServicesAlbum OnAddService="AddService">

                                        </Handyman_SP_UI.Pages.WorkShop.Services.ServicesAlbum>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
            </div>

            <!--Back to top button-->
            <button @onclick="@BackToTop" class="float-end border-0 bg-transparent shadow-lg btn-outline-warning">
                <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" fill="currentColor" class="bi bi-arrow-up-circle border-0" viewBox="0 0 16 16">
                    <path fill-rule="evenodd" d="M1 8a7 7 0 1 0 14 0A7 7 0 0 0 1 8zm15 0A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-7.5 3.5a.5.5 0 0 1-1 0V5.707L5.354 7.854a.5.5 0 1 1-.708-.708l3-3a.5.5 0 0 1 .708 0l3 3a.5.5 0 0 1-.708.708L8.5 5.707V11.5z" />
                </svg>
            </button>
            <!--End Back to top button-->
        
}
else
{
    <div class="d-flex justify-content-center">
        <div class="spinner-border" role="status">
            <span class="visually-hidden"></span>
        </div>
        <span class="visually-visible">Loading...No WorkShop was found, please try again</span>
    </div>
}
    </Authorized>
         <NotAuthorized>

        <a href="Identity/Account/Login" class="nav-link text-dark">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-amd" viewBox="0 0 16 16">
                <path d="m.334 0 4.358 4.359h7.15v7.15l4.358 4.358V0H.334ZM.2 9.72l4.487-4.488v6.281h6.28L6.48 16H.2V9.72Z" />
            </svg>
        </a>
         </NotAuthorized>
</AuthorizeView>

@code {
    ServiceProviderModel providerModel = new ServiceProviderModel()!;

    protected override async Task OnInitializedAsync()
    {
        try
        {    
            providerModel = await _providerHelper.GetProvider();
            if(providerModel!=null && providerModel.employeeProfile is null)
            {
                providerModel.employeeProfile = await _providerHelper.GetProviderProfile();
            }
            else if (providerModel.employeeProfile is null)
            {
                NavManager.NavigateTo("./Identity/Account/ProfileRegister");
            }

        }catch(Exception ex)
        {
            throw new Exception(ex.Message, ex.InnerException);   
        }

    }

    //Get a full path to route with to the directory of the image
    string CreateWebPath(string relativePath)
    {
        if(relativePath!=null)
        {
            return Path.Combine(_config.GetValue<string>("WebStorageRoot")!,relativePath);
        }
        return "";
    }

    //Navigate to Create WorkShop
    void GotoCreateWorkShop()
    {
        NavManager.NavigateTo("registers", true);
    }

    //Go to top page
    private async Task BackToTop()
    {
        await JsRuntime.InvokeVoidAsync("OnScrollEvent");
    }

    /// <summary>
    /// Add this service to the provider's services
    /// </summary>
    /// <returns></returns>
    /// <exception cref="Exception"></exception>
    async Task AddService(ServiceModel serviceModel)
    {
        //sp.Services = new List<ServiceModel>();

        try
        {
            if(providerModel!=null && providerModel.Services.Count > 0)
            {
                providerModel.Services.Add(serviceModel);
                await _providerHelper.AddService(providerModel);
                StateHasChanged();
            }
        }
        catch(Exception ex)
        {
            throw new Exception(ex.Message, ex.InnerException);
        }
    }
}
