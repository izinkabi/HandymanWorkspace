@page "/add-members"

@using Microsoft.AspNetCore.Identity
@using Handyman_SP_UI.Areas.Identity.Data

@using HandymanProviderLibrary.Api.Service
@using HandymanProviderLibrary.Models
@using Handyman_SP_UI.Pages.ServiceProviderComponent


 
@inject IServiceEndpoint _servicesEP
@inject IBusinessHelper _businessHLP
@inject SignInManager<Handyman_SP_UIUser> SignInManager
@inject UserManager<Handyman_SP_UIUser> UserManager
@inject NavigationManager NavManager

<!-- Register member-->
@if (newBusiness!=null)
{
        <div class="row"  >
            <!--Members -->
           
                  <div class="col-6">

                            <div class="mt-2" >
                             
                                    <div class="card card-body">

                                     
                                        <div class="input-group mb-3">
                                            <span class="input-group-text">First and last name</span>
                                            <input type="text" @bind-value="@profile.Names" class="form-control" id="profileName" placeholder="First name(s)" required>
                                            <input type="text"  class="form-control" id="lastName" placeholder="Surname" required>
                                        </div>
                                        
                                        
                                        <div class="mb-3">
                                            <label for="dateOfBirth" class="form-label">Date of birth</label>
                                            <input type="date"  class="form-control fa-italic" id="dateOfBirth" required>
                                        </div>
                                        <div class="mb-3">
                                            <label for="phoneNumber" class="form-label">Cell number</label>
                                        <input type="text"  class="form-control fa-italic fa-phone" id="phoneNumber" placeholder="(+27) -- --- ----" required>
                                        </div>

                                        <div class="m-3">
                                            <label for="phoneNumber" class="form-label">Photo</label>
                                            <InputFile OnChange="OnChangeFileInput" class="form-control fa-italic fa-phone" id="phoneNumber" accept=".jpg,.png,.jpeg" required>
                                            </InputFile>
                                        </div>

                                        <button class="btn btn-sm btn-primary" @onclick="AddNewMember">
                                            Add
                                        </button>
                                        
                                    </div>
                                
                            </div>
                           

                  </div>
                
                <!--Added Members-->

             <div class="col-6">
               
                 <div class="row">

                @if (newBusiness.Employees != null && newBusiness.Employees.Count > 0)
                {

                    @foreach (var member in newBusiness.Employees)
                    {
                        <div class="col justify-content-center text-center shadow rounded-4 p-4 p-md-3 mb-2">
                            <svg class="bd-placeholder-img rounded-circle p-4 p-md-3" width="140" height="140" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 140x140" preserveAspectRatio="xMidYMid slice" focusable="false">
                                <title>Placeholder</title>
                                <rect width="100%" height="100%" fill="#777" />
                                <text x="50%" y="50%" fill="#777" dy=".3em">140x140</text>
                            </svg>
                            <br/>
                            <label>
                                @if (member.IsOwner)
                                {
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-patch-check-fill" viewBox="0 0 16 16">
                                        <path d="M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01-.622-.636zm.287 5.984-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708z" />
                                    </svg>
                                }
                                Owner
                                <input type="checkbox" class="form-check" @bind-value="member.IsOwner" />
                            </label>
                          
                         
                            <h2 class="font-monospace text-center">@member.employeeProfile.Names  @member.employeeProfile.Surname</h2>
                            <p class="fst-italic text-center fa-italic">@member.employeeProfile.DateOfBirth</p><br />
                            <small>@member.employeeProfile.PhoneNumber</small><br />
                            <p class="text-center"><a class="btn btn-secondary" @onclick="@(()=>RemoveMember(member))">Remove</a></p>
                        </div>
                    }
                }
                 </div>
           
             </div>
                <!--End Members-->
        </div>
       

        @if (HasMember)
        {
            <div class="form-control">
                <button @onclick="@(()=>OnSaveMembers.InvokeAsync(newBusiness))" class="btn btn-primary" data-bs-target="#regProviderCarouselSlide" data-bs-slide="next">
                    Save
                </button>
            </div>
        }
}




<!--End Register member -->
@code {

    BusinessModel? newBusiness = new();
    bool HasMember;
    bool isNewMember;
    private ProfileModel profile = new();

    [Parameter]
    public BusinessModel? NewBusiness { get { return newBusiness; } set { newBusiness = value; } }
    [Parameter]
    public EventCallback<BusinessModel> OnSaveMembers { get; set; }

    protected override async Task OnInitializedAsync()
    {
        newBusiness = new()!;
        profile = new();
    }


    void AddNewMember()
    {

        if (profile != null)
        {
            ServiceProviderModel member = new();

            foreach(var m in newBusiness.Employees)
            {
                if(m.employeeProfile.Names == profile.Names)
                {
                    return;
                }
            }
            member.employeeProfile = profile;
            newBusiness.Employees.Add(member);
            profile = new();

            HasMember = true;
        }

    }

    void RemoveMember(ServiceProviderModel provider)
    {
        if (provider != null)
        {
            newBusiness.Employees.Remove(provider);
        }
    }

    void OnChangeFileInput(InputFileChangeEventArgs e)
    {
        IBrowserFile file = e.File;

        if (file == null)
        {
            return;
        }


    }

}

