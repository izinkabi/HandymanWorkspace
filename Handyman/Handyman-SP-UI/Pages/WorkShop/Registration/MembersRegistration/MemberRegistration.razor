@page "/member-registration"
@page "/members"

@using HandymanProviderLibrary.Models
@using Handyman_SP_UI.Pages.WorkShop.Registration.MembersRegistration
@using Microsoft.AspNetCore.Components.Web

@inject IProviderHelper _providerHelper
@inject IConfiguration _config
@inject NavigationManager NavManager

<AuthorizeView Context="Auth">
    <Authorized>
@if (provider != null)
{



        <!--In Between Modals-->
        <div class="modal fade" id="regProfileModalToggle" aria-hidden="true" aria-labelledby="regProfileModalToggleLabel" tabindex="-1">
        <div class="modal-dialog modal-fullscreen-xxl-down">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="regProfileModalToggleLabel">Profile</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <!--Profile-->
                        @if (!IsProfileSaved)
                        {

                            <!--Edit-->
                            <div class="card card-body">

                                <EditForm Model="provider.employeeProfile" OnValidSubmit="RegisterHandyman">


                                    <div class="input-group mb-3">
                                        <span class="input-group-text">First and last name</span>
                                        <InputText  @bind-Value="@provider.employeeProfile.Names" class="form-control" id="profileName" placeholder="First name(s)" required>

                                        </InputText>
                                        <InputText @bind-Value="provider.employeeProfile.Surname" class="form-control" id="lastName" placeholder="Surname" required>

                                        </InputText>
                                    </div>


                                    <div class="mb-3">
                                        <label for="dateOfBirth" class="form-label">Date of birth</label>
                                        <InputDate class="form-control fa-italic" @bind-Value="@provider.employeeProfile.DateOfBirth" id="dateOfBirth" required>

                                        </InputDate>
                                    </div>
                                    <div class="mb-3">
                                        <label for="genderSelect" class="form-label">Gender</label>
                                        <select type="text" class="form-select" @onchange="SelectedGender" id="genderSelect" required>
                                            <option selected>Choose...</option>
                                            <option value="1">Male</option>
                                            <option value="2">Female</option>
                                            <option value="3">Other</option>
                                        </select>
                                   
                                    </div>
                                    <div class="mb-3">
                                        <label for="phoneNumber" class="form-label">Cell number</label>
                                        <InputText class="form-control fa-italic fa-phone" @bind-Value="@provider.employeeProfile.PhoneNumber" id="phoneNumber" placeholder="(+27) -- --- ----" >

                                        </InputText>
                                    </div>

                                    <div class="m-3">
                                        <label for="imageFile" class="form-label">Photo</label>
                                        <InputFile OnChange="OnChangeFileInput" class="form-control fa-italic fa-phone" id="imageFile" accept=".jpg,.png,.jpeg">
                                        </InputFile>
                                    </div>
                                    <button type="submit" class="btn btn-sm btn-primary">
                                        Save
                                    </button>
                                </EditForm>

                            </div>
                            <!--End Edit-->
                        }
                        else
                        {
                            <!--Details-->
                            <div class="row">
                                <div class="col justify-content-center text-center shadow rounded-4 p-4 p-md-3 mb-2">
                                    <svg class="bd-placeholder-img rounded-circle p-4 p-md-3" width="140" height="140" xmlns="http://www.w3.org/2000/svg" role="img" aria-label="Placeholder: 140x140" preserveAspectRatio="xMidYMid slice" focusable="false">
                                        <title>Placeholder</title>
                                        <rect width="100%" height="100%" fill="#777" />
                                        <text x="50%" y="50%" fill="#777" dy=".3em">140x140</text>
                                    </svg>
                                    <br />
                                    <label>
                                        @if (provider.IsOwner)
                                        {
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-patch-check-fill" viewBox="0 0 16 16">
                                                <path d="M10.067.87a2.89 2.89 0 0 0-4.134 0l-.622.638-.89-.011a2.89 2.89 0 0 0-2.924 2.924l.01.89-.636.622a2.89 2.89 0 0 0 0 4.134l.637.622-.011.89a2.89 2.89 0 0 0 2.924 2.924l.89-.01.622.636a2.89 2.89 0 0 0 4.134 0l.622-.637.89.011a2.89 2.89 0 0 0 2.924-2.924l-.01-.89.636-.622a2.89 2.89 0 0 0 0-4.134l-.637-.622.011-.89a2.89 2.89 0 0 0-2.924-2.924l-.89.01-.622-.636zm.287 5.984-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 1 1 .708-.708L7 8.793l2.646-2.647a.5.5 0 0 1 .708.708z" />
                                            </svg>
                                        }
                                        Owner
                                        <InputCheckbox class="form-check" @bind-Value="provider.IsOwner"/>
                                    </label>


                                    <h2 class="font-monospace text-center">@provider.employeeProfile.Names  @provider.employeeProfile.Surname</h2>
                                    <p class="fst-italic text-center fa-italic">@provider.employeeProfile.DateOfBirth</p><br />
                                    <small>@provider.employeeProfile.PhoneNumber</small><br />
                                    <p class="text-center">
                                        <a class="btn btn-secondary" @onclick="@(EditProfile)">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                            </svg>
                                    
                                        </a>
                                        </p>
                                </div>
                            </div>
                            <!--End details-->
                        }

               
                    <!--End Profile-->
                </div>
                    @if (IsProfileSaved)
                    {
                        <div class="modal-footer">
                            <button class="btn btn-primary" data-bs-target="#regServicesModalToggle" data-bs-toggle="modal">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-arrow-right-short" viewBox="0 0 16 16">
                                    <path fill-rule="evenodd" d="M4 8a.5.5 0 0 1 .5-.5h5.793L8.146 5.354a.5.5 0 1 1 .708-.708l3 3a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708-.708L10.293 8.5H4.5A.5.5 0 0 1 4 8z" />
                                </svg>
                                Services
                            </button>
                        </div>
                    }
            </div>
        </div>
        </div>

            <button class="btn btn-primary" data-bs-target="#regProfileModalToggle" data-bs-toggle="modal">Register Handyman</button>
            <!--End In Between Modals-->
        }
        else
        {
            <div class="d-flex align-items-center">
                <strong>Loading...</strong>
                <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
            </div>
        }
    </Authorized>
    <NotAuthorized>
         <a href="Identity/Account/Login" class="nav-link text-dark">
            <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" fill="currentColor" class="bi bi-amd" viewBox="0 0 16 16">
                <path d="m.334 0 4.358 4.359h7.15v7.15l4.358 4.358V0H.334ZM.2 9.72l4.487-4.488v6.281h6.28L6.48 16H.2V9.72Z" />
            </svg>
        </a>
    </NotAuthorized>
</AuthorizeView>



@code {
    private ServiceProviderModel? provider = new();
    bool IsProfileSaved;
    bool IsServicesSaved;
    protected override async Task OnInitializedAsync()
    {
        provider.employeeProfile = new();
        provider.employeeProfile.DateOfBirth = DateTime.UtcNow;
        IsProfileSaved = false;
       
    }

    void SelectedGender(ChangeEventArgs e)
    {
        if (e.Value is not null)
        {
            switch ((string)e.Value)
            {
                case "1":
                    provider.employeeProfile.Gender = "Male";

                    break;
                case "2":
                    provider.employeeProfile.Gender = "Female";
                    break;
                case "3":
                    provider.employeeProfile.Gender = "Other";
                    break;

            }


        }
    }

    private long MaxFileSize = 1024 * 1024 * 3;//3 megabytes
    private int MaxAllowFiles = 1;
    private List<string> errors = new();
    IBrowserFile? file;
    void OnChangeFileInput(InputFileChangeEventArgs e)
    {
        file = e.File;
    }

    private async Task<string> CaptureImageFile()
    {

        if (file is null)
        {
            return "";
        }

        try
        {


            //Get the file name
            string newFileName = Path.ChangeExtension(
                Path.GetRandomFileName(),
                Path.GetExtension(file.Name));
            //Create file path / actual path
            string path = Path.Combine(
                _config.GetValue<string>("FileStorage")!,
                provider.employeeProfile.Names,
                newFileName);

            //Get relative path

            string relativePath = Path.Combine(provider.employeeProfile.Names, newFileName);
            //Create a directory
            Directory.CreateDirectory(Path.Combine(
            _config.GetValue<string>("FileStorage")!,
            provider.employeeProfile.Names));

            await using FileStream fs = new(path, FileMode.Create);
            await file.OpenReadStream(MaxFileSize).CopyToAsync(fs);

            return relativePath;
        }
        catch (Exception ex)
        {
            errors.Add($"File: {file.Name} Error: {ex.Message}");
            throw new Exception(ex.Message, ex.InnerException);
        }

    }

    //string CreateWebPath(string relativePath)
    //{
    //    return Path.Combine(_config.GetValue<string>("WebStorageRoot")!,relativePath);
    //}
    void SaveServices(List<ServiceModel> services)
    {

        if (services != null && services.Count>0)
        {
            provider.Services.AddRange(services);
            IsServicesSaved = true;
        }

    }


    async void RegisterHandyman()
    {
        try
        {
            provider.employeeProfile.ImageUrl = await CaptureImageFile();
            _providerHelper.RegisterProfile(provider.employeeProfile);
            IsProfileSaved = true;
            NavManager.NavigateTo("profile",true);
            
        }
        catch (Exception ex)
        {
            errors.Add($"Error:{ex.Message}");         
        }
    }

    void EditProfile()
    {
        IsProfileSaved = false;

    }
}
