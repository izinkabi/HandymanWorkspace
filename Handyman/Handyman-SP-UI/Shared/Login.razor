@page "/sign-in"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Web
@inject AuthenticationStateProvider _authStateProvider
@inject IAuthEndpoint _authEndPoint 
@inject NavigationManager NavManager
@attribute [AllowAnonymous]

<div class="container container-fluid m-auto shadow rounded">
    <h3>Login</h3>
    <EditForm Model="Input" OnValidSubmit="ClickLogin">

        <div class="row mb-3">
            <label for="loginInputEmail3" class="col-sm-2 col-form-label">Email</label>
            <div class="col-sm-10">
                <InputText type="email" @bind-Value="Input.Username" class="form-control" id="loginInputEmail3" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="loginInputPassword3" class="col-sm-2 col-form-label">Password</label>
            <div class="col-sm-10">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" id="loginInputPassword3" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-sm-10 offset-sm-2">
                <div class="form-check">
                    <InputCheckbox @bind-Value="Input.RememberMe" class="form-check-input" id="gridCheck1" />
                    <label class="form-check-label" for="gridCheck1">
                        Remember Me
                    </label>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Sign in</button>
        <br/>
        <a class="link-primary m-auto p-2" @onclick="ToSignUp">Sign-Up</a>
    </EditForm>
</div>

@code {
    private string? returnUrl;

    private InputModel? Input = new InputModel()!;

    [Parameter]
    [SupplyParameterFromQuery(Name ="returnUrl")]
    public string? ReturnUrl { get { return returnUrl; } set { returnUrl = value; } }

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(returnUrl))
        {
            returnUrl = "/";
        }

        if ((await _authStateProvider.GetAuthenticationStateAsync()).User.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo(returnUrl);
        }
    }
    //Login dto
    private class InputModel
    {
        [EmailAddress(ErrorMessage = "Please enter valid email address")]
        [Required(ErrorMessage ="Invalid email input")]
        internal string? Username { get; set; }
        [Required(ErrorMessage = "Invalid Password")]
        [DataType(DataType.Password)]
        internal string? Password { get; set; }
        public bool RememberMe { get; set; }
    }

    //Submitting the form execution method
    async Task ClickLogin()
    {
        
        var authedUserModel = await _authEndPoint.LoginUser(Input.Username, Input.Password);
        var state = await _authStateProvider.GetAuthenticationStateAsync();
        await InvokeAsync(StateHasChanged);
        if (state.User.Identity.IsAuthenticated)
        {
            NavManager.NavigateTo(returnUrl);
        }
        
    }
    async Task ToSignUp()
    {
        NavManager.NavigateTo("sign-up");
    }
}
