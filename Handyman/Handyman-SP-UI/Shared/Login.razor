@page "/sign-in"
@using System.ComponentModel.DataAnnotations;
@using Microsoft.AspNetCore.Components.Web
@inject AuthenticationStateProvider _authStateProvider
@inject IAuthEndpoint _authEndPoint 
@inject NavigationManager NavManager


<div class="container container-fluid m-auto">
    <h3>Login</h3>
    <EditForm Model="Input" OnValidSubmit="ClickLogin">

        <div class="row mb-3">
            <label for="inputEmail3" class="col-sm-2 col-form-label">Email</label>
            <div class="col-sm-10">
                <input type="email" @bind-value="Input.Username" class="form-control" id="inputEmail3" />
            </div>
        </div>
        <div class="row mb-3">
            <label for="inputPassword3" class="col-sm-2 col-form-label">Password</label>
            <div class="col-sm-10">
                <input type="password" @bind-value="Input.Password" class="form-control" id="inputPassword3" />
            </div>
        </div>

        <div class="row mb-3">
            <div class="col-sm-10 offset-sm-2">
                <div class="form-check">
                    <input @bind-value="Input.RememberMe" class="form-check-input" id="gridCheck1" />
                    <label class="form-check-label" for="gridCheck1">
                        Remember Me
                    </label>
                </div>
            </div>
        </div>
        <button type="submit" class="btn btn-primary">Sign in</button>

    </EditForm>
</div>

@code {
    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }
    private InputModel? Input = new InputModel()!;

    private class InputModel
    {
        [Required]
        public string? Username { get; set; }
        [Required]
        public string? Password { get; set; }
        public bool RememberMe { get; set; }
    }


    async Task ClickLogin()
    {
        var authedUserModel = await _authEndPoint.LoginUser(Input.Username, Input.Password);
        //await _localStorage.SetItemAsync("token", authedUserModel.Access_Token);
        var user = await _authStateProvider.GetAuthenticationStateAsync();



    }
}
