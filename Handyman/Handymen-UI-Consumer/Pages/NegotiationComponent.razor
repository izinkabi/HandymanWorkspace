@page "/nego"

@using Microsoft.AspNetCore.Components.Web
@using HandymanUILibrary.Models
@using Handymen_UI_Consumer.Helpers
@using Handymen_UI_Consumer.Models
@using Handymen_UI_Consumer.Pages.Orders.Tasks
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.SignalR.Client;


<div class="row">
    <button class="btn btn-dark btn-outline-info m-auto" @onclick="OpenConnection" disabled="@(IsConnected == true)">
        Open Connection
    </button>
</div>

<div class="row">
    <div class="row form-group g-2">
        <div class="col">
            <label for="offerInput">
                Offer(ZAR): <input id="offerInput" type="number" @bind-value="@inputPrice" class="form-control">
        </label>
        </div>
        @if (isDateSaved)
        {
            <div class="col">   
                 <div class="col px-3">
                     <label>
                        Edit Date: <br/>
                        <small class="fst-italic">@DateOnly.Parse($"{orderProperty.duedate.ToShortDateString()}")</small>
                        <button class="btn bg-transparent btn-outline-info border-0" @onclick="editDate">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                            </svg>
                        </button>
                     </label>
                </div> 
           </div>
        }

        <!--Due Date-->
        @if (!isDateSaved)
        {
            <div class="col">
            <div class="container shadow border-1 mb-2 justify-content-center">
                <label>
                        Save Date:  
                        <input type="datetime-local" @bind-value="@orderProperty.duedate" id="dueDate" class="border-0" name="dueDate">
                        <button @onclick="saveDate" class="btn btn-outline-info border-0 bg-transparent">
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save-fill" viewBox="0 0 16 16">
                                <path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v7.793L4.854 6.646a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l3.5-3.5a.5.5 0 0 0-.708-.708L8.5 9.293V1.5z" />
                            </svg>
                        </button>
                </label>
            </div>
            </div>
        }
    </div>

</div>

<div class="card m-auto p-1 border-0 rounded" style="width: 18rem;">
    <div class="card-header text-center">
        Nego Messages
    </div>
    <ul class="list-group list-group-flush">
        @foreach (var offer in negoTimeConvos.ToList())
        {
            <li class="list-group-item">@offer.Key <small class="float-end">@offer.Value</small></li>
        }
    </ul>
</div>
<hr/>
<div>
 <button type="button" class="btn btn-primary" @onclick="Send" disabled="@(IsConnected == false)">Send</button>
</div>

@code {

    private HubConnection? hubConnection;
    private List<string> negoMessages = new();
    private string? negoMessageInput;
    private float inputPrice;

    Dictionary<string, DateTime> negoTimeConvos = new Dictionary<string, DateTime>();

    bool isOnDetails;
    bool isDateSaved;
    private HandymanUILibrary.Models.OrderModel? orderProperty;


    [Parameter]
    public HandymanUILibrary.Models.OrderModel? OrderProperty
    {
        get { return orderProperty; }
        set { orderProperty = value; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeHubConnection();
            await OpenConnection();
        }
        catch (Exception ex)
        {
            negoMessages.Add(ex.Message);
        }

    }

    private void InitializeHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
          .WithUrl("https://localhost:7042/negoHub")
          .WithAutomaticReconnect()
          .Build();

        //Trying to connect
        hubConnection.Reconnecting += (sender) =>
        {
            var newOfferMessage = "Attempting to reconnect";
            negoMessages.Add(newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        //Try to reconnect
        hubConnection.Reconnected += (sender) =>
        {
            var newOfferMessage = "Reconnected to the server";
            negoMessages.Clear();
            negoMessages.Add(newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };



        //Closing the connection
        hubConnection.Closed += (sender) =>
        {
            var newOfferMessage = "Connection Closed";
            negoMessages.Add(newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };


    }
    //Is Connected
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    //Open Connection
    public async Task OpenConnection()
    {
        if(hubConnection is null)
        {
            InitializeHubConnection();
        }

        hubConnection.On<string, float>(("ReceiveOffer"), (user, offer) =>
        {
            var formattedMessage = $"{user}:{offer}";
            if (!negoTimeConvos.ContainsKey(formattedMessage))
            {
                negoTimeConvos.Add(formattedMessage, DateTime.Now);
                //add a message from another client
                negoMessages.Add(formattedMessage);
                InvokeAsync(StateHasChanged);
            }
    
        });


        try
        {
            await hubConnection.StartAsync();
            negoMessages.Add("Connection Started");

        }
        catch (Exception ex)
        {
            negoMessages.Add(ex.Message);
        }
        //Initialise the offer to be negotiated
        //negoMessageInput = order.service.price;
    }

    //Negotiate offer
    public async Task Send()
    {
        try
        {
            if (IsConnected)
            {

                await hubConnection.InvokeAsync("SendOffer",
                              "Razor Client", inputPrice);
            }

        }
        catch (Exception ex)
        {
            negoMessages.Add(ex.Message);
        }
    }



    //Save Due date 
    void saveDate()
    {
        if (isDateSaved)
        {
            isDateSaved = false;
        }
        isDateSaved = true;
    }

    //Save Due
    void editDate()
    {
        isDateSaved = false;
    }
}
