@page "/nego"

@using Microsoft.AspNetCore.Components.Web
@using Microsoft.AspNetCore.Components.Forms


@using HandymanUILibrary.Models
@using Handymen_UI_Consumer.Helpers
@using Handymen_UI_Consumer.Models
@using Handymen_UI_Consumer.Pages.Orders.Tasks
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.SignalR.Client;
@using Microsoft.JSInterop;
@inject IJSRuntime JS
@implements IAsyncDisposable

<style>
.left, .right{
        float:left;
    }

    .left{
        background: #33cc33;
        width: 800px;
        height: 1000px;
        transition: width 1s ;
    }

    .right{
        background: #cc66ff;
        width: 1000px;
        height: 1000px;
        transition: width 1s;
    }

    .left:hover{
        width: max-content;
    }

    .left:hover + .right{
        width: max-content;
    }
</style>


    <!--Connection Button-->
    <button class="btn btn-sm btn-dark btn-outline-info m-2 shadow" @onclick="OpenConnection" disabled="@(IsConnected == true)">
        Open Connection
        @if (IsConnected)
        {
            <span class="position-absolute top-0 start-100 translate-middle p-2 bg-success border border-light rounded-circle">
                <span class="visually-hidden">New alerts</span>
            </span>
        }
        else
        {
            <span class="position-absolute top-0 start-100 translate-middle p-2 bg-danger border border-light rounded-circle">
                <span class="visually-hidden">New alerts</span>
            </span>
        }
    </button>





<!--Tasks and their total  -->
<div id="negoContainer" class="container overflow-hidden text-center">
    <div class="row gx-2">
        <div class="col">
            <div class="accordion border-0" id="tasksAccordion">
                <div class="accordion-item">
                    <h2 class="accordion-header">
                        <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#tasksAccordionCollapse" aria-expanded="true" aria-controls="collapseOne">
                            Tasks
                        </button>
                    </h2>
                    <div id="tasksAccordionCollapse" class="accordion-collapse collapse show" data-bs-parent="#tasksAccordion">
                        <div class="accordion-body" role="document">
                            <div class="card m-auto p-1 border-0 rounded" style="width: 18rem;">
                                <!--Tasks List and their prices-->
                                <ul class="list-group list-group-flush">
                                    @foreach (var task in orderProperty.Tasks)
                                    {
                                      
                                           <li class="list-group-item shadow">
                                            <button class="btn-close btn-outline-danger float-end px-2" @onclick="@(()=>RemoveTaskOnList(task))">
                                            </button>
                                            @task.tas_title
                                            <small class="float-end px-2">
                                                R
                                                @if (task.task_id != 0 && TaskPrices.ContainsKey(task.task_id))
                                                {
                                                    @(TaskPrices[task.task_id].negotiated_price)
                                                }else{
                                                    @(0)
                                                }
                                                
                                            </small>
                                        </li>
                                       
                                        
                                    }
                                </ul>
                            <div class="card-footer">
                                    <button class="btn btn-outline-dark shadow" data-bs-toggle="collapse" data-bs-target="#addTasksAccodion" aria-expanded="false" aria-controls="collapseExample">
                                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-plus-circle" viewBox="0 0 16 16">
                                        <path d="M8 15A7 7 0 1 1 8 1a7 7 0 0 1 0 14zm0 1A8 8 0 1 0 8 0a8 8 0 0 0 0 16z" />
                                        <path d="M8 4a.5.5 0 0 1 .5.5v3h3a.5.5 0 0 1 0 1h-3v3a.5.5 0 0 1-1 0v-3h-3a.5.5 0 0 1 0-1h3v-3A.5.5 0 0 1 8 4z" />
                                    </svg>
                                </button>
                            </div>


                            <!--Add Tasks Section-->
                                 <div class="col m-3">
                        <!--New Task/task-item form-->

            
                            <!--New task button-->
            
            

                                <div class="collapse bg-transparent bg-opacity-10 rounded" id="addTasksAccodion">
                                    <div class="card card-body shadow rounded-4 m-2 py-2">
                                        <!--The following code can be found in the this address https://mdbootstrap.com/docs/standard/extended/to-do-list/#!-->


                                        <div class="col">
                                            <div class="card border-0" id="list1">
                                                <div class="card-body ">

                                                    <div class="">
                                                        <div class="card border-0">
                                                            <EditForm Model="newTask" OnValidSubmit="@(()=>AddToTasks(newTask))">
                                                            <div class="card-body">
                                                                    <div class="m-1">
                                                                        <InputText @bind-Value="@newTask.tas_title" required="enter title" type="text" class="form-control form-control" id="exampleFormControlInput1"
                                                                            placeholder="taskItem Title..." />
                                                                    </div>
                                                                    <div class="m-1">
                                                                        <InputTextArea @bind-Value="@newTask.tas_description" required="enter description" class="form-control" id="exampleFormControlTextarea1" rows="3" placeholder="Description..."></InputTextArea>
                                                                    </div>
                                                            </div>
                                                            <div>                                   
                                                                <button type="submit" class="btn btn-primary m-3">Add</button>
                                                            </div>
                                                            </EditForm>
                                                        </div>

                                                    </div>

                                                </div>
                                            </div>
                                        </div>


                                    </div>
                                </div>
                            </div>
                            <!--End Add Tasks Section-->


                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="col shadow" >
            <div class="header border-light" style="background-color: gray;">
                <h4 class="text-bg-primary">Total Price</h4>
                <p class="text-bg-primary"><strong>R @inputPrice</strong></p>
            </div>
            
          
           <!--Due date-->
            <div class="row">
                <div class="row form-group g-2">


                    @if (isDateSaved)
                    {
                        <div class="col">
                            <div class="col px-3">
                                <label>
                                    Edit Date: <br />
                                    <small class="fst-italic">@DateOnly.Parse($"{orderProperty.duedate.ToShortDateString()}")</small>
                                    <button class="btn btn-outline-info border-0" @onclick="editDate">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-pencil-square" viewBox="0 0 16 16">
                                            <path d="M15.502 1.94a.5.5 0 0 1 0 .706L14.459 3.69l-2-2L13.502.646a.5.5 0 0 1 .707 0l1.293 1.293zm-1.75 2.456-2-2L4.939 9.21a.5.5 0 0 0-.121.196l-.805 2.414a.25.25 0 0 0 .316.316l2.414-.805a.5.5 0 0 0 .196-.12l6.813-6.814z" />
                                            <path fill-rule="evenodd" d="M1 13.5A1.5 1.5 0 0 0 2.5 15h11a1.5 1.5 0 0 0 1.5-1.5v-6a.5.5 0 0 0-1 0v6a.5.5 0 0 1-.5.5h-11a.5.5 0 0 1-.5-.5v-11a.5.5 0 0 1 .5-.5H9a.5.5 0 0 0 0-1H2.5A1.5 1.5 0 0 0 1 2.5v11z" />
                                        </svg>
                                    </button>
                                </label>
                            </div>
                        </div>
                    }

                    <!--Due Date-->
                    @if (!isDateSaved)
                    {
                        <div class="col">
                            <div class="shadow border-1 mb-2 justify-content-center">
                                <label>
                                    Save Date:
                                    <input type="date" @bind-value="@orderProperty.duedate" id="dueDate" class="border-0 form-control" />
                                    <button @onclick="saveDate" class="btn border-0 btn-outline-dark">
                                        <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-save-fill" viewBox="0 0 16 16">
                                            <path d="M8.5 1.5A1.5 1.5 0 0 1 10 0h4a2 2 0 0 1 2 2v12a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V2a2 2 0 0 1 2-2h6c-.314.418-.5.937-.5 1.5v7.793L4.854 6.646a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l3.5-3.5a.5.5 0 0 0-.708-.708L8.5 9.293V1.5z" />
                                        </svg>
                                    </button>
                                </label>
                            </div>
                        </div>
                    }<br/>
                    
                </div>

            </div>


            <hr />

            <!--Nego Messages-->
            @if (receivedMessages.Count > 0 || negoMessages.Count > 0)
            {
                <div class="container text-center">
                    <div class="row" style="height:250px;overflow-y:scroll">
                        <div class="col order-last flex-lg-wrap" >
                            @foreach (KeyValuePair<DateTime,string> offerMessage in receivedMessages)
                            {
                                <p class="float-start bg-light rounded shadow">
                                    <small class="fst-italic bg-light" style="color:gray">@(TimeOnly.FromDateTime(offerMessage.Key)) </small>
                                    <hr />
                                    @offerMessage.Value
                                </p>
                               
                            }
                        </div>
                       
                        <div class="col order-first flex-lg-wrap">
                            @foreach (KeyValuePair<DateTime,string> negoMessage in negoMessages)
                            {
                                <p class="float-start bg-light rounded shadow">
                                    <small class="fst-italic bg-light" style="color:gray">@(TimeOnly.FromDateTime(negoMessage.Key)) </small>
                                    <hr />
                                    @negoMessage.Value
                                </p>
                               
                            }
                            
                        </div>
                    </div>
                </div>

            }
            <hr />
            <div class="">
                <button type="button" class="btn btn-primary" @onclick="Send" disabled="@(IsConnected == false)">Send</button>
            </div>
        </div>
    </div>
</div>




<hr />

<article class="text-center">
    Please read through the Ts and Cs of the operation you about to do and accept to proceed.
    <label for="tsandcs" class="fst-italic">
        Terms and Conditions
        <input id="tsandcs" type="checkbox" @bind-value="IsTsAndCsAccepterd" />
    </label>
    
</article>
<hr />
<div class="float-end">
    @if(IsNewNotification)
    {
        <button type="button" class="btn btn-outline-success" @onclick="Send" disabled="@(IsConnected == false)">
            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-hand-thumbs-up" viewBox="0 0 16 16">
                <path d="M8.864.046C7.908-.193 7.02.53 6.956 1.466c-.072 1.051-.23 2.016-.428 2.59-.125.36-.479 1.013-1.04 1.639-.557.623-1.282 1.178-2.131 1.41C2.685 7.288 2 7.87 2 8.72v4.001c0 .845.682 1.464 1.448 1.545 1.07.114 1.564.415 2.068.723l.048.03c.272.165.578.348.97.484.397.136.861.217 1.466.217h3.5c.937 0 1.599-.477 1.934-1.064a1.86 1.86 0 0 0 .254-.912c0-.152-.023-.312-.077-.464.201-.263.38-.578.488-.901.11-.33.172-.762.004-1.149.069-.13.12-.269.159-.403.077-.27.113-.568.113-.857 0-.288-.036-.585-.113-.856a2.144 2.144 0 0 0-.138-.362 1.9 1.9 0 0 0 .234-1.734c-.206-.592-.682-1.1-1.2-1.272-.847-.282-1.803-.276-2.516-.211a9.84 9.84 0 0 0-.443.05 9.365 9.365 0 0 0-.062-4.509A1.38 1.38 0 0 0 9.125.111L8.864.046zM11.5 14.721H8c-.51 0-.863-.069-1.14-.164-.281-.097-.506-.228-.776-.393l-.04-.024c-.555-.339-1.198-.731-2.49-.868-.333-.036-.554-.29-.554-.55V8.72c0-.254.226-.543.62-.65 1.095-.3 1.977-.996 2.614-1.708.635-.71 1.064-1.475 1.238-1.978.243-.7.407-1.768.482-2.85.025-.362.36-.594.667-.518l.262.066c.16.04.258.143.288.255a8.34 8.34 0 0 1-.145 4.725.5.5 0 0 0 .595.644l.003-.001.014-.003.058-.014a8.908 8.908 0 0 1 1.036-.157c.663-.06 1.457-.054 2.11.164.175.058.45.3.57.65.107.308.087.67-.266 1.022l-.353.353.353.354c.043.043.105.141.154.315.048.167.075.37.075.581 0 .212-.027.414-.075.582-.05.174-.111.272-.154.315l-.353.353.353.354c.047.047.109.177.005.488a2.224 2.224 0 0 1-.505.805l-.353.353.353.354c.006.005.041.05.041.17a.866.866 0 0 1-.121.416c-.165.288-.503.56-1.066.56z" />
            </svg>
        </button>
    }
</div>

@code {

    private HubConnection? hubConnection;
    private Dictionary<DateTime,string> negoMessages = new();
    private Dictionary<DateTime,string> receivedMessages = new Dictionary<DateTime, string>();
    private string? negoMessageInput;
    private float inputPrice;
    List<string> Errors = new List<string>();
    private bool IsTsAndCsAccepterd;

    Dictionary<string, DateTime> negoTimeConvos = new Dictionary<string, DateTime>();
    Dictionary<int, PriceModel> TaskPrices = new Dictionary<int, PriceModel>();
    bool IsNewNotification;
    bool isOnDetails;
    bool isDateSaved;
    private HandymanUILibrary.Models.OrderModel? orderProperty;
    private TaskModel newTask = new TaskModel();

    [Parameter]
    public HandymanUILibrary.Models.OrderModel? OrderProperty
    {
        get { return orderProperty; }
        set { orderProperty = value; }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            InitializeHubConnection();
            await OpenConnection();
        }
        catch (Exception ex)
        {
            negoMessages.Add(DateTime.Now, ex.Message);
        }

    }

    //Initialise the hub connection
    private void InitializeHubConnection()
    {
        hubConnection = new HubConnectionBuilder()
          .WithUrl("https://localhost:7042/negoHub")
          .WithAutomaticReconnect()
          .Build();

        //Trying to connect
        hubConnection.Reconnecting += (sender) =>
        {
            var newOfferMessage = "Attempting to reconnect";
            receivedMessages.Add(DateTime.Now, newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };

        //Try to reconnect
        hubConnection.Reconnected += (sender) =>
        {
            var newOfferMessage = "Reconnected to the server";
            negoMessages.Clear();
            negoMessages.Add(DateTime.Now,newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };



        //Closing the connection
        hubConnection.Closed += (sender) =>
        {
            var newOfferMessage = "Connection Closed";
            negoMessages.Add(DateTime.Now,newOfferMessage);
            InvokeAsync(StateHasChanged);
            return Task.CompletedTask;
        };
    }

    void RemoveTaskOnList(TaskModel taskRemoved)
    {
        if (taskRemoved != null)
        {
            if (orderProperty.Tasks.Contains(taskRemoved))
            {
                orderProperty.Tasks.Remove(taskRemoved);
                if (TaskPrices.ContainsKey(taskRemoved.task_id) && inputPrice!=0)
                {
                    inputPrice = inputPrice - TaskPrices[taskRemoved.task_id].base_Price;
                }
                InvokeAsync(StateHasChanged);

            }
        }

    }

    async void AddToTasks(TaskModel newTaskModel)
    {

        if (newTaskModel != null)
        {
            newTaskModel.tas_service_id = orderProperty.service.id;
            if (orderProperty.Tasks == null)
            {
                orderProperty.Tasks = new List<TaskModel>()!;
            }
            if (TaskPrices.ContainsKey(newTask.task_id))
            {
                inputPrice += TaskPrices[newTask.task_id].negotiated_price;
            }

            orderProperty.Tasks.Add(newTaskModel);
            await InvokeAsync(StateHasChanged);
        }

    }

    //Is Connected
    public bool IsConnected => hubConnection?.State == HubConnectionState.Connected;

    //Open Connection
    public async Task OpenConnection()
    {
        if(hubConnection is null)
        {
            InitializeHubConnection();
        }

        //This is a listener method (handler for the calls)
        //Specifies the parameter type and passes the arguments in an anonymous method
        hubConnection.On<string, Dictionary<int,PriceModel>, DateTime>(("ReceiveOffer"), (user, taskPrices, orderDueDate) =>
        {
            TaskPrices = taskPrices;
            orderProperty.duedate = orderDueDate;
            inputPrice = 0;
            foreach (KeyValuePair<int,PriceModel> taskPrice in TaskPrices)
            {
                inputPrice += taskPrices[taskPrice.Key].base_Price;
            }
            var formattedMessage = $"WorkShop Member: {user}: promises to deliver on this date {this.orderProperty.duedate} with a total of R{inputPrice}";
            IsNewNotification = true;

            
            if (!negoTimeConvos.ContainsKey(formattedMessage))
            {
                //add a message from another client
                receivedMessages.Add(DateTime.Now,formattedMessage);
            }
            
            InvokeAsync(StateHasChanged);
        });


        try
        {
            await hubConnection.StartAsync();
            negoMessages.Add(DateTime.Now,"Connection Started");

        }
        catch (Exception ex)
        {
            negoMessages.Add(DateTime.Now, ex.Message);
        }
        //Initialise the offer to be negotiated
        //negoMessageInput = order.service.price;
    }

    //Negotiate offer
    public async Task Send()
    {
        try
        {
            if (IsConnected && inputPrice!=0)
            {
                
                await hubConnection.InvokeAsync("SendTasksUpdate",
                              "Razor Client", orderProperty.duedate,inputPrice);
                negoMessages.Add(DateTime.Now, $"R{inputPrice}: @{TimeOnly.FromDateTime(DateTime.Now)}");
            }

        }
        catch (Exception ex)
        {
            negoMessages.Add(DateTime.Now,ex.Message);
        }
    }



    //Save Due date 
    void saveDate()
    {
        if (isDateSaved)
        {
            isDateSaved = false;
        }
        isDateSaved = true;
    }

    //Save Due
    void editDate()
    {
        isDateSaved = false;
    }


    private IJSObjectReference? module;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./assets/dist/js/negotiationModule.js");
        }
    }

    private async void TriggerZoom()
    {
        await Prompt(20);
    }

    public async ValueTask Prompt(int? zoomSize)
    {
        if(module!=null)
        await module.InvokeVoidAsync("showVal", zoomSize);
    } 
   
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            await module.DisposeAsync();
        }
    }
           
}
