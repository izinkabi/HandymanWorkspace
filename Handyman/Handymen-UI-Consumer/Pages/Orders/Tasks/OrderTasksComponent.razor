@page "/order-tasks-component"
@using HandymanUILibrary.API.Consumer.task
@using Handymen_UI_Consumer.Helpers
@using Handymen_UI_Consumer.Models
@using Microsoft.AspNetCore.Components.Web
@inject ItaskEndPoint _taskEndPoint
@inject IOrderHelper _orderHelper



<div class="row d-inline-flex m-0">
   


        <div class="col m-3"
        <!--New Task/task-item form-->

            <!--New task button-->
            <button class="btn-sm btn-primary" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                task items
            </button>

            <!--End New task button-->

            <div class="collapse" id="collapseExample">
                <div class="card card-body">
                    <!--The following code can be found in the this address https://mdbootstrap.com/docs/standard/extended/to-do-list/#!-->


                    <div class="col">
                        <div class="card" id="list1" style="border-radius: .75rem; background-color: #eff1f2;">
                            <div class="card-body py-4 px-4 px-md-5">

                                <p class="h2 text-center mt-3 mb-4 pb-3 text-primary">
                                    <i class="fas fa-check-square me-1"></i>
                                    <u>Add task item</u>
                                </p>

                                <div class="pb-2">
                                    <div class="card">
                                        
                                        <div class="card-body">
                                                <div class="mb-1">
                                                    <input @bind="@taskItem.ItemName" type="text" class="form-control form-control" id="exampleFormControlInput1"
                                                        placeholder="taskItem Title...">
                                                </div>
                                                <div class="mb-1">
                                                    <textarea @bind="@taskItem.Description" class="form-control" id="exampleFormControlTextarea1" rows="3"  placeholder="Description..."></textarea>
                                                </div>
                                        </div>
                                        <div class="card-footer">
                                            <button  @onclick="AddNewtaskItem" class="btn btn-primary m-3">Add</button>
                                        </div>
                                       
                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </div>
    


    <div class="m-3 col ">


        <div class="d-flex justify-content-end align-items-center mb-4 pt-2 pb-3">
            <p class="small mb-0 me-2 text-muted">Filter</p>
            <select class="select">
                <option value="1">All</option>
                <option value="2">Completed</option>
                <option value="3">Active</option>
                <option value="4">Has due date</option>
            </select>
            <p class="small mb-0 ms-4 me-2 text-muted">Sort</p>
            <select class="select">
                <option value="1">Added date</option>
                <option value="2">Due date</option>
            </select>
            <a href="#!" style="color: #23af89;" data-mdb-toggle="tooltip" title="Ascending">
                <i class="fas fa-sort-amount-down-alt ms-2"></i>
            </a>
        </div>
        @if (OrdertaskList.Count > 0)
        {


            foreach (var item in OrdertaskList)
            {
                <ul class="list-group list-group-horizontal rounded-0 bg-transparent">
                    <li class="list-group-item d-flex align-items-center ps-0 pe-3 py-1 rounded-0 border-0 bg-transparent">
                        <div class="form-check">
                            <input class="form-check-input me-0" type="checkbox" value="" id="flexCheckChecked1"
                           aria-label="..." checked />
                        </div>
                    </li>
                    <li class="list-group-item px-3 py-1 d-flex align-items-center flex-grow-1 border-0 bg-transparent">
                        <p class="lead fw-normal mb-0">@item.ItemName</p>
                    </li>
                    <li class="list-group-item ps-3 pe-0 py-1 rounded-0 border-0 bg-transparent">
                        <div class="d-flex flex-row justify-content-end mb-1">
                            <a href="#!" class="text-info" data-mdb-toggle="tooltip" title="Edit task">
                                <i class="fas fa-pencil-alt me-3"></i>
                            </a>
                            <button @onclick="@(()=> DeleteTask(@item))" class="text-danger" data-mdb-toggle="tooltip" title="Delete task">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                        <div class="text-end text-muted">
                             <p class="small mb-0"><i class="fas fa-info-circle me-2"></i>@DateTime.UtcNow</p>
                            
                        </div>
                    </li>
                </ul>
            }
        }else
        {
            <p>
                There are no tasks added,
                did you mean to create one?
            </p>
        }
        
       

    </div>

</div>
<!--End task-item -->

@code {


    List<taskModel> OrdertaskList = new()!;//Local display list
    taskModel? taskItem = new()!;
    string? ErrorMsg;
    List<HandymanUILibrary.Models.taskModel>? newtaskList = new()!;

    [Parameter]
    public int? OrderId { get; set; }
    [Parameter]
    public bool IsNewOrder { get; set; }

    public List<HandymanUILibrary.Models.taskModel>? OrdertaskListProperty
    {
        get { return newtaskList; }

    }

    public List<taskModel> taskDisplayList { get { return OrdertaskList; }  }





    void DeleteTask(taskModel taskitem)
    {
        if (taskitem is not null)
        {
            OrdertaskList.Remove(taskitem);
        }
    }

    //Adding task-item in the new list
    void AddNewtaskItem()
    {
        if(taskItem != null)
        {
            newtaskList.Add(new HandymanUILibrary.Models.taskModel
                {
                    ItemName = taskItem?.ItemName, //this can be a combination of a constant & user input
                    Description = taskItem?.Description,
                    OrderId = taskItem.OrderId,//this will be zero here since the order is new
                    Type = 0,//this should be a constant to add logic
                    Status = 0//constant!
                });

            OrdertaskList.Add(new taskModel()
                {
                    ItemName = taskItem?.ItemName, //this can be a combination of a constant & user input
                    Description = taskItem?.Description,
                    OrderId = taskItem.OrderId,//this will be zero here since the order is new
                    Type = 0,//this should be a constant to add logic
                    Status = 0//constant!
                });
            taskItem = new()!;
        }
    }


}
