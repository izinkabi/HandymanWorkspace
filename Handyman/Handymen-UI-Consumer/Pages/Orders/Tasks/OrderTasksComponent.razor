@page "/order-tasks-component"
@implements IDisposable
@using HandymanUILibrary.Models
@using Handymen_UI_Consumer.Helpers
@using Microsoft.AspNetCore.Components.Web

<div class="row d-inline-flex m-3 bg-transparent" >

    @if (isNew)
    {
        <div class="col m-3">
        <!--New Task/task-item form-->

            <p class="h4 font-monospace text-center mb-3 shadow" style="text-shadow: 2px 2px 8px #FF0000;">
                <button class="btn-sm btn-warning opacity-75 float-lg-start" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
                    <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-card-list" viewBox="0 0 16 16">
                        <path d="M14.5 3a.5.5 0 0 1 .5.5v9a.5.5 0 0 1-.5.5h-13a.5.5 0 0 1-.5-.5v-9a.5.5 0 0 1 .5-.5h13zm-13-1A1.5 1.5 0 0 0 0 3.5v9A1.5 1.5 0 0 0 1.5 14h13a1.5 1.5 0 0 0 1.5-1.5v-9A1.5 1.5 0 0 0 14.5 2h-13z" />
                        <path d="M5 8a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7A.5.5 0 0 1 5 8zm0-2.5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm0 5a.5.5 0 0 1 .5-.5h7a.5.5 0 0 1 0 1h-7a.5.5 0 0 1-.5-.5zm-1-5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zM4 8a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0zm0 2.5a.5.5 0 1 1-1 0 .5.5 0 0 1 1 0z" />
                    </svg>
                </button>
                <i class="fas fa-check-square me-1">Task Items</i>
                
            </p>
            <!--New task button-->
            
            

            <div class="collapse bg-transparent bg-opacity-10 rounded" id="collapseExample">
                <div class="card card-body shadow rounded-4 m-2 py-2">
                    <!--The following code can be found in the this address https://mdbootstrap.com/docs/standard/extended/to-do-list/#!-->


                    <div class="col">
                        <div class="card border-0" id="list1">
                            <div class="card-body ">

                                <div class="">
                                    <div class="card border-0">
                                        
                                        <div class="card-body">
                                                <div class="m-1">
                                                    <input @bind="@newTask.tas_title" type="text" class="form-control form-control" id="exampleFormControlInput1"
                                                        placeholder="taskItem Title...">
                                                </div>
                                                <div class="m-1">
                                                    <textarea @bind="@newTask.tas_description" class="form-control" id="exampleFormControlTextarea1" rows="3"  placeholder="Description..."></textarea>
                                                </div>
                                        </div>
                                        <div>                                   
                                            <button type="submit" @onclick="@(()=>OnAddToTasks.InvokeAsync(newTask))" class="btn btn-primary m-3">Add</button>
                                        </div>

                                    </div>

                                </div>

                            </div>
                        </div>
                    </div>


                </div>
            </div>
        </div>
    
    }else
    {
        <div class="col bg-transparent px-0 m-0">

            <ul class="list-group list-group-horizontal rounded-0 bg-transparent">
               
                    @if (newTask.tas_status == 3)
                    {

                        <li class="list-group-item d-flex border-0 bg-transparent">
                        <button class="p-0 m-0 float-start border-0 bg-transparent">
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-check2-all" viewBox="0 0 16 16">
                                    <path d="M12.354 4.354a.5.5 0 0 0-.708-.708L5 10.293 1.854 7.146a.5.5 0 1 0-.708.708l3.5 3.5a.5.5 0 0 0 .708 0l7-7zm-4.208 7-.896-.897.707-.707.543.543 6.646-6.647a.5.5 0 0 1 .708.708l-7 7a.5.5 0 0 1-.708 0z" />
                                    <path d="m5.354 7.146.896.897-.707.707-.897-.896a.5.5 0 1 1 .708-.708z" />
                                </svg>
                            </button>
                        </li>
                        
                    }
                

                <li class="list-group-item m-1 p-1 py-1 d-flex flex-grow-1 border-0 bg-transparent">
                    <p class="lead fw-normal mb-0">@newTask.tas_title</p>
                </li>
                <!--Task is not yet finished-->
                @if (newTask.tas_status!= 0 && newTask.tas_status < 3)                            
                {

                    <li class="list-group-item d-flex align-items-center border-0 float-end bg-transparent">
                        <button class="border-0 bg-transparent btn-outline-danger" data-bs-toggle="modal" data-bs-target="#deleteTaskModal@(newTask.Id)">
                       
                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-backspace" viewBox="0 0 16 16">
                                <path d="M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z" />
                                <path d="M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-7.08z" />
                            </svg>
                        </button>
                    </li>
                }

                @if(newTask.tas_status == 0)
                {
                    <li class="list-group-item d-flex align-items-center border-0 float-end bg-transparent">
                        <button @onclick="@(()=>OnRemoveTask.InvokeAsync(newTask))" class="border-0 bg-transparent btn-outline-danger" >

                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-backspace" viewBox="0 0 16 16">
                                <path d="M5.83 5.146a.5.5 0 0 0 0 .708L7.975 8l-2.147 2.146a.5.5 0 0 0 .707.708l2.147-2.147 2.146 2.147a.5.5 0 0 0 .707-.708L9.39 8l2.146-2.146a.5.5 0 0 0-.707-.708L8.683 7.293 6.536 5.146a.5.5 0 0 0-.707 0z" />
                                <path d="M13.683 1a2 2 0 0 1 2 2v10a2 2 0 0 1-2 2h-7.08a2 2 0 0 1-1.519-.698L.241 8.65a1 1 0 0 1 0-1.302L5.084 1.7A2 2 0 0 1 6.603 1h7.08zm-7.08 1a1 1 0 0 0-.76.35L1 8l4.844 5.65a1 1 0 0 0 .759.35h7.08a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1h-7.08z" />
                            </svg>
                        </button>
                    </li>
                }
            </ul>

            



        </div>
    }

</div>
@if (@ErrorMsg != null)
{
    <p>
        @ErrorMsg
    </p>
}
<!--End task-item -->

<!--This component need more fielsd / UI input components to completely fill up the Task Model-->
@code {


    string? ErrorMsg;
    bool isnew;
    TaskModel? newTask;

    [Parameter]
    public TaskModel NewTask
    {
        get { return newTask; }
        set { newTask = value; }
    }
    

    [Parameter]
    public bool isNew
    {
        get{ return isnew; }
        set{ isnew = value; }
    }

    [Parameter] 
    public EventCallback<TaskModel> OnAddToTasks { get; set; }

    [Parameter]
    public EventCallback<TaskModel> OnRemoveTask { get; set; }

    void IDisposable.Dispose()
    {
        
    }
    
}
