@page "/order-component"
@page "/order-c"
@using HandymanUILibrary.Models
@using Handymen_UI_Consumer.Helpers
@using Handymen_UI_Consumer.Pages.Orders.Tasks
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavManager
@inject ILogger<OrderComponent> Logger
@inject IOrderHelper _orderHelper


<!--Order Component MarkUp-->
<div class="row">
<dl class="col align-content-center">
        
        <div class="card mb-3 ">
          <div class="row g-0">
            <div class="col-md-4">
                <img src="/Images/@(order.service.img)" class="img-fluid rounded-start" alt="...">
            </div>
            <div class="col-md-8">
              <div class="card-body">
                    <h5 class="card-title" id="orderName">@order.service.name</h5>
                    <p class="card-text" id="orderDescription"> @order.service.category.description</p>
                    <p class="card-text"><small class="text-muted">@order.datecreated.ToString("MMMM dd, yyyy")</small></p>
              </div>
            </div>
          </div>
        </div>
</dl>

    @if (order.status < 1)
    {
        <OrderTasksComponent isNew="true"
                         newTask="new TaskModel()!"
                         OnAddToTasks="AddToTasks">
        </OrderTasksComponent>
    }

    @if (order.status > 0 || order.Tasks.Count() > 0)
    {
        <!--List of task-items in the confirmed order-->
        <div class="list-group list-group-flush align-content-lg-center">
           @foreach (var item in taskList)
           {                
                <OrderTasksComponent isNew="false" 
                             newTask="item" 
                             OnAddToTasks="AddToTasks">
                </OrderTasksComponent>
           }
        </div>
        <!--End List-->
    }

    @*
    ### Button display logic in a re-usable component###
    If the order is confirmed by the consumer and by the service provider accepted --display tracking button
    If the order is not confirmed by the consumer (and ofcourse by default cannot be accepted by a service provider) --display confirm button
    *@

    @if (order.status > 3)
    {
        <button class="btn btn-outline-success" data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight">Track Order</button>

    }

    @if (order.status < 1)
    {
        <button @onclick="ConfirmOrder" type="button" class="btn btn-primary m-3" data-bs-toggle="modal" data-bs-target="#staticBackdropConfirmorder"> Confirm </button>
    }

</div>
@if (ErrorMsg != null)
{
    <p>
        @ErrorMsg
    </p>
}

@code {

    OrderModel order;
    string? ErrorMsg;
    List<TaskModel>? taskList = new()!;

    [Parameter]
    public OrderModel OrderComponentModel
    {
        get
        {
            return order; 
        }

        set
        {
            order = value;

        }
    }

    protected override void OnInitialized()
    {
        if(order!=null)
            if(order.status != 0)
            {
                taskList = order?.Tasks?.ToList();
                //StateHasChanged();
            }
       
        // NavManager.LocationChanged += HandleLocationChanged;
    }


    /// <summary>
    ///  Add the new tasks to the order's task list
    /// </summary>
    /// <param name="newTaskModel"></param>
    void AddToTasks(TaskModel newTaskModel)
    {

        if (newTaskModel != null)
        {
            newTaskModel.tas_service_id = order.service.id;
            taskList.Add(newTaskModel);
            StateHasChanged();
        }

    }

    //Redirection in razor component
    void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    

    /// </summary>
    /// Confirming the order placement--soon to be in ordershelper by all means
    /// <returns></returns> 
    /// <summary>
    
    async Task ConfirmOrder()
    {
        try
        {
            order.Tasks = taskList;
            order.datecreated = DateTime.Now;
            order.duedate = DateTime.Now;
            order.status = 1; //Thus confirmed
            await _orderHelper.CreateOrder(order);
        }
        catch (Exception ex)
        {
            ErrorMsg = ex.Message;
        }

    }


    /// <summary>
    /// This method is under construction
    /// Deleting / Cancelling the order, its tasks and its request
    /// Be careful of notifying the Service provider of the deleted request
    /// </summary>
    /// <param name="order"></param>
    /// <returns>Complete task / Handled Exception</returns>
    [Authorize]
    public async Task DeleteOrder(OrderModel order)
    {
        try
        {
            await _orderHelper.DeleteOrder(order);
            NavManager.ToAbsoluteUri("/index");
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            ErrorMsg = ex.Message;

        }
    }
}
