@page "/order-component"
@page "/order"
@using HandymanUILibrary.Models
@using Handymen_UI_Consumer.Helpers
@using Handymen_UI_Consumer.Models;
@using Handymen_UI_Consumer.Pages.Orders.Tasks
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Routing
@using Microsoft.AspNetCore.Components.Web

@inject NavigationManager NavManager
@inject ILogger<OrderComponent> Logger
@inject IOrderHelper _orderHelper


<!--Order Component MarkUp-->
@if (order!=null && order.service != null)
{


    <div class="row m-3 rounded-4 box-shadow" role="document">

        <dl class="col align-content-center bg-info bg-opacity-10">

            <div class="card m-3 bg-transparent border-0">
                <div class="row g-0">
                    <div class="col-md-4">
                        <img src="/Images/@(order.service.img)" class="img-fluid rounded-start" alt="...">
                    </div>
                    <div class="col-md-8">
                        <div class="card-body">
                            <h5 class="card-title" id="orderName">@order.service.name</h5>
                            <p class="card-text" id="orderDescription"> @order.service.category.description</p>
                            <p class="card-text"><small class="text-muted">@order.datecreated.ToString("MMMM dd, yyyy")</small></p>

                        </div>
                    </div>
                </div>
            </div>
        </dl>


        @if (taskList != null && taskList.Count > 0 && isOnDetails || order.status == 0 && taskList != null)
        {
            <!--/End Modal-->
            <!--List of task-items in the confirmed order-->
            <div class="list-group list-group-flush align-content-lg-center">

                @foreach (var item in taskList)
                {
                    <OrderTasksComponent isNew="false"
                             NewTask="@item"
                             OnAddToTasks="AddToTasks"
                             OnRemoveTask="RemoveTaskOnList">

                    </OrderTasksComponent>
                }
            </div>
            <!--End List-->
        }

        @if (order.status < 1)
        {
            <!--Creating new tasks-->
            <OrderTasksComponent isNew="true"
                         NewTask="@(new TaskModel())"
                         OnAddToTasks="AddToTasks">
            </OrderTasksComponent>
        }

        
        @if (taskList!=null)
        {
            @if (taskList.Count == 0)
            {
                          <p class="font-monospace fst-italic">
                               There are no orders
                          </p>

            }
        }

        @if (taskList != null )
        {
            
            @if (order.status < 1)
            {
                <div class="m-3 justify-content-center">
                    <button @onclick="ConfirmOrder" type="button" class="btn btn-primary btn-lg" data-bs-toggle="modal" data-bs-target="#staticBackdropConfirmorder"> Confirm </button>
                </div>
            }
        }

        @*
    ### Button display logic in a re-usable component###
    If the order is confirmed by the consumer and by the service provider accepted --display tracking button
    If the order is not confirmed by the consumer (and ofcourse by default cannot be accepted by a service provider) --display confirm button
    *@

     

        

    </div>
}


@code {

    OrderModel order;
    bool isOnDetails;
    List<TaskModel>? taskList = new()!;

    [Parameter]
    public bool IsOnDetails { get {return isOnDetails; } set { isOnDetails = value; } }

    [Parameter]
    public OrderModel OrderComponentModel
    {
        get
        {
            return order; 
        }

        set
        {
            order = value;
            taskList = order?.Tasks?.ToList();
        }
    }




    /// <summary>
    ///  Add the new tasks to the order's task list
    ///  Method called when calling click the button to add a task to a list
    /// </summary>
    /// <param name="newTaskModel"></param>
    void AddToTasks(TaskModel newTaskModel)
    {

        if (newTaskModel != null)
        {
            newTaskModel.tas_service_id = order.service.id;
            if (taskList==null)
            {
                taskList = new()!;
            }
            taskList.Add(newTaskModel);

        }

    }

    //Redirection in razor component
    void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        Logger.LogInformation("URL of new location: {Location}", e.Location);
    }

    //Remove a task
    void RemoveTaskOnList(TaskModel taskRemoved)
    {
        if(taskRemoved!=null)
            if (taskList.Contains(taskRemoved))
            {
                taskList.Remove(taskRemoved);
            } 
    }

    /// </summary>
    /// Confirming the order placement--soon to be in ordershelper by all means
    /// <returns></returns> 
    /// <summary>

    async Task ConfirmOrder()
    {
        try
        {
            order.Tasks = taskList;
            order.datecreated = DateTime.UtcNow;
            order.duedate = DateTime.Now;
            order.status = 1; //Thus confirmed
            await _orderHelper.CreateOrder(order);
        }
        catch (Exception)
        {
            throw;
        }

    }


    /// <summary>
    /// This method is under construction
    /// Deleting / Cancelling the order, its tasks and its request
    /// Be careful of notifying the Service provider of the deleted request
    /// </summary>
    /// <param name="order"></param>
    /// <returns>Complete task / Handled Exception</returns>
    [Authorize]
    public async Task CancelOrder(OrderModel order)
    {
        try
        {
            if (order != null)
            {
                _orderHelper.CancelOrder(order);
                NavManager.ToAbsoluteUri("/index");
                await InvokeAsync(StateHasChanged);
            }

        }
        catch (Exception ex)
        {
            throw;

        }
    }
}
