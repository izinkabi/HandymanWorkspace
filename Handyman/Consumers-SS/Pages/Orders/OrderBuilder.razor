@page "/order-builder"

@inject HttpClient http
@inject NavigationManager NavManager

<!--Go back button-->
<!--Breadcrumbs-->
<nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
    <ol class="breadcrumb">
        <li class="breadcrumb-item"><a href="##" onclick="history.go(-2); return false;">Home</a></li>
        <li class="breadcrumb-item active" aria-current="page"><a href="##" onclick="history.go(-1); return false;">Service Details</a></li>
        <li class="breadcrumb-item active" aria-current="page">Confirmation</li>
    </ol>
</nav>

<!--EndBreadCrumbs-->
<h3 class="text-capitalize font-monospace shadow text-center">Confirm Order</h3>


@if (order == null)
{
    <div class="d-flex align-items-center">
        <strong>Loading...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
        <hr />
    </div>
    <div class="card" aria-hidden="true">
        <img src="..." class="card-img-top" alt="...">
        <div class="card-body">
            <h5 class="card-title placeholder-glow">
                <span class="placeholder col-6"></span>
            </h5>
            <p class="card-text placeholder-glow">
                <span class="placeholder col-7"></span>
                <span class="placeholder col-4"></span>
                <span class="placeholder col-4"></span>
                <span class="placeholder col-6"></span>
                <span class="placeholder col-8"></span>
            </p>
            <a href="#" tabindex="-1" class="btn btn-primary disabled placeholder col-6"></a>
        </div>
    </div>
}
else
{
    <OrderComponent IsOnDetails="false" OrderComponentModel="order" />
    <!--Buttons-->
    <div class="row shadow" role="document">


        @if (!(order.status == 0))
        {
            <div class="col-5 justify-content-start">

                <button type="submit" class="btn-outline-secondary">Close</button>

            </div>
            <div class="col-7 ">

                @*<button type="submit" class="btn btn-outline-success">Confirm</button> <!--data-bs-toggle="offcanvas" data-bs-target="#offcanvasRight" aria-controls="offcanvasRight"-->
        *@  <!-- Button trigger modal -->



            </div>
        }
    </div>

}
         




@code {

    OrderModel? order;
    string? ErrorMsg;
    IList<ServiceModel>? serviceDisplayList;


    //public Order Order { get; set; } = default!;
    [Parameter]
    [SupplyParameterFromQuery(Name ="OID")]
    public int Id { get; set; }
    public OrderModel? OrderProperty
    {
        get
        {
            return order;
        }
        set
        {
            order = value;
        }
    }


    //Get the order for display (the default method on OrderPage redirect or call)
    public async Task OnGetAsync()
    {

        await buildOrder(Id);

        if (order.Id == Id)
        {
            NavManager.NavigateTo("OrderDetails");
        }

    }

    //Load / Create the Order
    async Task buildOrder(int? id)
    {
        await LoadServices();

        foreach (var service in serviceDisplayList)
        {
            if (service.id == id.Value)
            {
                order = new HandymanUILibrary.Models.OrderModel();
                order.service = new();
                order.service = service;

            }
        }

    }
    //Load Services from the IServiceEndPoint service
    async Task LoadServices()
    {

        try
        {
            //await the endpoint
            serviceDisplayList = await http.GetFromJsonAsync<List<ServiceModel>>("Services");

        }
        catch (Exception ex)
        {
            ErrorMsg = ex.Message;
        }

    }


}
